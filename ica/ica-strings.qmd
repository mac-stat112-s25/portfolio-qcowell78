---
title: "Strings"
format: html
number-sections: false
---

```{r}
library(tidyverse)
```


## Exercise 1: Time slots

```{r}
courses <- read.csv("https://mac-stat.github.io/data/registrar.csv")

# Check it out
head(courses)
```

```{r}
# Use our more familiar wrangling tools to warm up
# Construct a table that indicates the number of classes offered in each day/time slot
courses |>
  group_by(days) |>
  summarise(weekly_schedule = n()) |>
  arrange(desc(weekly_schedule))

courses |>
  group_by(time) |>
  summarise(daily_schedule = n()) |>
  arrange(desc(daily_schedule))

# Print only the 6 most popular time slots
courses |>
  group_by(time) |>
  summarise(daily_schedule = n()) |>
  arrange(desc(daily_schedule)) |>
  head(6)
```

## Exercise 2: Prep the data

```{r}
# Split avail_max into 2 separate variables: avail and max.
# Use avail and max to define a new variable called enroll. HINT: You’ll need as.numeric()
# Split the course number into 3 separate variables: dept, number, and section. HINT: You can use separate() to split a variable into 3, not just 2 new variables.
courses_clean <- courses |>
  separate(avail_max, c("avail", "max"), sep = " / ") |>
  mutate(avail = as.numeric(avail), max = as.numeric(max)) |>
  mutate(enroll = max-avail) |>
  separate(number, c("dept", "big_number"), sep = " ") |>
  separate(big_number, c("number", "section"), sep = "-")
```

## Exercise 3: Courses by department

```{r}
# Using courses_clean, identify the 6 departments that offered the most sections
courses_clean |>
  group_by(dept) |>
  summarise(nmbr_sections = n()) |>
  arrange(desc(nmbr_sections)) |>
  head(6)

# Identify the 6 departments with the longest average course titles
courses_clean |>
  group_by(dept) |>
  summarise(title_length = mean(str_length(name))) |>
  arrange(desc(title_length)) |>
  head(6)
```

## Exercise 4: STAT courses

### Part a

```{r}
# Get a subset of courses_clean that only includes courses taught by Alicia Johnson.
courses_clean |>
  filter(instructor == "Alicia Johnson")
```

### Part b
Create a new dataset from `courses_clean`, named `stat`, that only includes STAT sections. In this dataset:

In the course names:

 - Remove “Introduction to” from any name.
 - Shorten “Statistical” to “Stat” where relevant.

Define a variable that records the `start_time` for the course.

Keep only the `number`, `name`, `start_time`, `enroll` columns.

The result should have 19 rows and 4 columns.

```{r}
stat <- courses_clean |>
  filter(dept == "STAT") |>
  mutate(name = str_replace(name, "Statistical", "Stat"))|>
  mutate(name = str_remove(name, "Introduction to")) |>
  separate(time, c("start_time", "end"), sep = " - ") |>
  select(number, name, start_time, enroll)

dim(stat)
```

## Exercise 5: More cleaning

Make the following changes to the `courses_clean` data. Because they have different enrollment structures, and we don’t want to compare apples and oranges, remove the following:

 - all sections in `PE` and `INTD` (interdisciplinary studies courses)

 - all music ensembles and dance practicums, i.e. all `MUSI` and `THDA` classes with numbers less than 100. HINT: `!(dept == "MUSI" & as.numeric(number) < 100)`

 - all lab sections. Be careful which variable you use here. For example, you don’t want to search by “Lab” and accidentally eliminate courses with words such as “Labor”.

Save the results as `enrollments` (don’t overwrite `courses_clean`).

```{r}
enrollments <- courses_clean |>
  filter(dept != "PE", dept != "INTD") |>
  filter(
    !(dept == "MUSI" & as.numeric(number) < 100), 
    !(dept == "THDA" & as.numeric(number) < 100)) |>
  filter(!(str_detect(section, "L")))

dim(enrollments)
```

## Exercise 6: Enrollment & departments

Explore enrollments by department. You decide what research questions to focus on. Use both visual and numerical summaries.

```{r}
# Top 10 departments by average class size
enrollments |>
  group_by(dept) |>
  summarise(avg_class = mean(enroll)) |>
  arrange(desc(avg_class)) |>
  head(10)

enrollments |>
  group_by(dept) |>
  summarise(avg_class = mean(enroll)) |>
  arrange(desc(avg_class)) |>
  head(10) |>
  mutate(dept = fct_reorder(dept, avg_class, .desc = TRUE)) |>
  ggplot(aes(x = dept, y = avg_class)) +
    geom_col() +
    theme_light()
```

## Exercise 7: Enrollment & faculty

```{r}
# Problem: cross-listed courses!
enrollments |>
  filter(dept %in% c("STAT", "COMP"), number == 112, section == "01")
```

```{r}
# In order to not double count an instructor’s enrollments, we can keep only the courses that have distinct() combinations of days, time, instructor values
enrollments_2 <- enrollments |>
  distinct(days, time, instructor, .keep_all = TRUE)

# NOTE: By default this keeps the first department alphabetically
# That's fine because we won't use this to analyze department enrollments!
enrollments_2 |>
  filter(instructor == "Brianna Heggeseth", name == "Introduction to Data Science")
```
Now, explore enrollments by instructor. You decide what research questions to focus on. Use both visual and numerical summaries.

```{r}
# Number of students per instructor (top 10)
enrollments_2 |>
  group_by(instructor) |>
  summarise(total_students = sum(enroll)) |>
  arrange(desc(total_students)) |>
  head(10)

# Number of studets per instructor by department (top 8)
enrollments_2 |>
  group_by(instructor) |>
  summarise(total_students = sum(enroll)) |>
  arrange(desc(total_students)) |>
  left_join(enrollments_2, join_by(instructor == instructor)) |>
  select(instructor, total_students, dept) |>
  distinct(instructor, total_students, .keep_all = TRUE) |>
  head(8) |>
  separate(instructor, c("first", "last"), " ") |>
  mutate(last = fct_reorder(last, total_students, .desc = TRUE)) |>
  ggplot(aes(x = last, y = total_students, fill = dept)) +
    geom_col() + 
    labs(
      title = "Total Number of Students by Professor", 
      x = "Professor", 
      y = "# of Students", 
      fill = "Department") +
    theme_light()
```

