[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "COMP/STAT112 Notebook",
    "section": "",
    "text": "Welcome\nWelcome to my online portfolio for COMP/STAT112 course taken at Macalester College. Please, use the side bar on the left for navigation.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "bw/bw-uni.html",
    "href": "bw/bw-uni.html",
    "title": "\n1  Univariate Viz\n",
    "section": "",
    "text": "Use this file to generate a professional looking univariate visualization. The visualization will not perfect the first time but you are expected to improve on it throughout the semester especially after covering advanced topics such as effective viz.\n\n# load package\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n# Data on students in this class\nsurvey &lt;- read.csv(\"https://hash-mac.github.io/stat112site-s25/data/survey.csv\")\n# Create bar graph\nggplot(survey, aes(x = hangout)) +\n  geom_bar(fill = \"grey\") +\n  labs(x = \"Ideal Hangout Spot\", y = \"# of Students\", title = \"Ideal Hangout Spots of STAT 112 Students\") +\n  theme_light()\n\n\n\nBar graph showing the ideal hangout locations of STAT 112 students.",
    "crumbs": [
      "Best Work",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Univariate Viz</span>"
    ]
  },
  {
    "objectID": "bw/bw-bi.html",
    "href": "bw/bw-bi.html",
    "title": "2  Bivariate Viz",
    "section": "",
    "text": "Use this file to generate a professional looking bivariate visualization. The visualization will not perfect the first time but you are expected to improve it throughout the semester especially after covering advanced topics such as effective viz.",
    "crumbs": [
      "Best Work",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Bivariate Viz</span>"
    ]
  },
  {
    "objectID": "bw/bw-tri.html",
    "href": "bw/bw-tri.html",
    "title": "3  Trivariate Viz",
    "section": "",
    "text": "Use this file to generate a professional looking trivariate visualization. The visualization will not perfect the first time but you are expected to improve on it throughout the semester especially after covering advanced topics such as effective viz.",
    "crumbs": [
      "Best Work",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Trivariate Viz</span>"
    ]
  },
  {
    "objectID": "bw/bw-quad.html",
    "href": "bw/bw-quad.html",
    "title": "4  Quadvariate Viz",
    "section": "",
    "text": "Use this file to generate a professional looking quadvariate visualization. The visualization will not perfect the first time but you are expected to improve on it throughout the semester especially after covering advanced topics such as effective viz.",
    "crumbs": [
      "Best Work",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Quadvariate Viz</span>"
    ]
  },
  {
    "objectID": "bw/bw-spatial.html",
    "href": "bw/bw-spatial.html",
    "title": "5  Spatial Viz",
    "section": "",
    "text": "Use this file to generate a professional looking spatial visualization. The visualization will not perfect the first time but you are expected to improve on it throughout the semester especially after covering advanced topics such as effective viz.",
    "crumbs": [
      "Best Work",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Spatial Viz</span>"
    ]
  },
  {
    "objectID": "ica/quarto-demo.html",
    "href": "ica/quarto-demo.html",
    "title": "\n6  My first Quarto document\n",
    "section": "",
    "text": "6.1 Intro\nMacalester College is in the Twin Cities. It has:\nCheck it out for yourself:",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>My first Quarto document</span>"
    ]
  },
  {
    "objectID": "ica/quarto-demo.html#intro",
    "href": "ica/quarto-demo.html#intro",
    "title": "\n6  My first Quarto document\n",
    "section": "",
    "text": "four seasons\nbagpipes\ndelightful students",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>My first Quarto document</span>"
    ]
  },
  {
    "objectID": "ica/quarto-demo.html#exercise-1-deduce-quarto-features",
    "href": "ica/quarto-demo.html#exercise-1-deduce-quarto-features",
    "title": "\n6  My first Quarto document\n",
    "section": "\n6.2 Exercise 1: Deduce Quarto features",
    "text": "6.2 Exercise 1: Deduce Quarto features\nCheck out the appearance and contents of this document. Thoughts?\nIn the toolbar at the top of this document, Render the .qmd file into a .html file. Where is this file stored? Thoughts about its appearance / contents? Can you edit it?\nToggling between the .qmd and .html files, explain the purpose of the following features in the .qmd file:\n* A single asterisk on each side of a phrase italicizes that phrase.\n** Two asterisks on each side of a phrase bold that phrase.\n# A double hashtag inroduces a section heading, and a single hashtag is used for notes.\n- A hyphen creates a bulleted list.\n\\ No backslashes in document.\n![](url) This phrase allows the image to load.",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>My first Quarto document</span>"
    ]
  },
  {
    "objectID": "ica/quarto-demo.html#exercise-2-code",
    "href": "ica/quarto-demo.html#exercise-2-code",
    "title": "\n6  My first Quarto document\n",
    "section": "\n6.3 Exercise 2: Code",
    "text": "6.3 Exercise 2: Code\nHow does this appear in the .qmd? The .html? So…?!\nseq(from = 100, to = 1000, by = 50)\nThis does not function as a string of code on the webpage, but rather is only text.",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>My first Quarto document</span>"
    ]
  },
  {
    "objectID": "ica/quarto-demo.html#exercise-3-chunks",
    "href": "ica/quarto-demo.html#exercise-3-chunks",
    "title": "\n6  My first Quarto document\n",
    "section": "\n6.4 Exercise 3: Chunks",
    "text": "6.4 Exercise 3: Chunks\nQuarto isn’t a mind reader – we must distinguish R code from text. We do so by putting code inside an R chunk:\n\nseq(from = 100, to = 1000, by = 50)\n\n [1]  100  150  200  250  300  350  400  450  500  550  600  650  700  750  800\n[16]  850  900  950 1000\n\n\n\nPut the seq() code in the chunk.\nPress the green arrow in the top right of the chunk. What happens in the qmd?\nRender. What appears in the html: R code, output, or both?\n\nThe code shows up as a separate font and color, and also gives an output from the code.",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>My first Quarto document</span>"
    ]
  },
  {
    "objectID": "ica/quarto-demo.html#exercise-4-practice",
    "href": "ica/quarto-demo.html#exercise-4-practice",
    "title": "\n6  My first Quarto document\n",
    "section": "\n6.5 Exercise 4: Practice",
    "text": "6.5 Exercise 4: Practice\n\nUse R code to create the following sequence: 10 10 10 10\nStore the sequence as four_tens.\nUse an R function (which we haven’t learned!) to add up the numbers in four_tens.\n\n\nfour_tens &lt;- rep(10,4)\nsum(four_tens, na.rm = FALSE)\n\n[1] 40",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>My first Quarto document</span>"
    ]
  },
  {
    "objectID": "ica/quarto-demo.html#exercise-5-fix-this-code",
    "href": "ica/quarto-demo.html#exercise-5-fix-this-code",
    "title": "\n6  My first Quarto document\n",
    "section": "\n6.6 Exercise 5: Fix this code",
    "text": "6.6 Exercise 5: Fix this code\nCode is a form of communication, and the code below doesn’t cut it.\nPut the code in a chunk and fix it.\nRep(x = 1, times = 10) seq(from=100,to=1000,length=20) theNumberofStudentsinthisclass&lt;-27\n\nrep(1, 10)\n\n [1] 1 1 1 1 1 1 1 1 1 1\n\nseq(100, 1000, 20)\n\n [1]  100  120  140  160  180  200  220  240  260  280  300  320  340  360  380\n[16]  400  420  440  460  480  500  520  540  560  580  600  620  640  660  680\n[31]  700  720  740  760  780  800  820  840  860  880  900  920  940  960  980\n[46] 1000\n\nnumber_students &lt;- 27",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>My first Quarto document</span>"
    ]
  },
  {
    "objectID": "ica/quarto-demo.html#exercise-6-comments",
    "href": "ica/quarto-demo.html#exercise-6-comments",
    "title": "\n6  My first Quarto document\n",
    "section": "\n6.7 Exercise 6: Comments",
    "text": "6.7 Exercise 6: Comments\nRun the chunk below. Notice that R ignores anything in a line starting with a pound sign (#). If we took the # away we’d get an error!\n\n# This is a comment\n4 + 5\n\n[1] 9\n\n\nWe’ll utilize this feature to comment our code, i.e. leave short notes about what our code is doing. Below, replace the ??? with an appropriate comment.\n\n# converting Celsius to Fahrenheit\ntemperature_c &lt;- 10\ntemperature_f &lt;- temperature_c * 9/5 + 32\ntemperature_f\n\n[1] 50",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>My first Quarto document</span>"
    ]
  },
  {
    "objectID": "ica/ica-uni.html",
    "href": "ica/ica-uni.html",
    "title": "Univariate Viz",
    "section": "",
    "text": "Exercise 1: Research Questions\n# Import data\nhikes &lt;- read.csv(\"https://mac-stat.github.io/data/high_peaks.csv\")\nhead(hikes)\n\n             peak elevation difficulty ascent length time    rating\n1     Mt. Marcy        5344          5   3166   14.8 10.0  moderate\n2 Algonquin Peak       5114          5   2936    9.6  9.0  moderate\n3   Mt. Haystack       4960          7   3570   17.8 12.0 difficult\n4   Mt. Skylight       4926          7   4265   17.9 15.0 difficult\n5 Whiteface Mtn.       4867          4   2535   10.4  8.5      easy\n6       Dix Mtn.       4857          5   2800   13.2 10.0  moderate",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Univariate Viz</span>"
    ]
  },
  {
    "objectID": "ica/ica-uni.html#exercise-1-research-questions",
    "href": "ica/ica-uni.html#exercise-1-research-questions",
    "title": "Univariate Viz",
    "section": "",
    "text": "A visualization of the categorical rating variable of the hikes should include distinguishing visual elements for each category, such as a color scheme differentiated by hue. The rating of each trail can be displayed in a color-coded table.\nA visualization of the quantitative elevation variable could include visuals of each peak in order of height, or a more simplistic bar graph in which the y-axis is elevation and the x-axis is each peak.",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Univariate Viz</span>"
    ]
  },
  {
    "objectID": "ica/ica-uni.html#exercise-2-load-tidyverse",
    "href": "ica/ica-uni.html#exercise-2-load-tidyverse",
    "title": "Univariate Viz",
    "section": "Exercise 2: Load tidyverse",
    "text": "Exercise 2: Load tidyverse\n\n# Use the ggplot function\nggplot(hikes, aes(x = rating))\n\n\n\n\n\n\n# An error message appears\n\nThe package must be loaded.\n\n# Load the package\nlibrary(tidyverse)",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Univariate Viz</span>"
    ]
  },
  {
    "objectID": "ica/ica-uni.html#exercise-3-bar-chart-of-ratings---part-1",
    "href": "ica/ica-uni.html#exercise-3-bar-chart-of-ratings---part-1",
    "title": "Univariate Viz",
    "section": "Exercise 3: Bar Chart of Ratings - Part 1",
    "text": "Exercise 3: Bar Chart of Ratings - Part 1\n\n# Set up plotting frame to chart hike rating\nggplot(hikes, aes(x = rating))",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Univariate Viz</span>"
    ]
  },
  {
    "objectID": "ica/ica-uni.html#exercise-4-bar-chart-of-ratings---part-2",
    "href": "ica/ica-uni.html#exercise-4-bar-chart-of-ratings---part-2",
    "title": "Univariate Viz",
    "section": "Exercise 4: Bar Chart of Ratings - Part 2",
    "text": "Exercise 4: Bar Chart of Ratings - Part 2\nAdding geometric layer and customizing plot theme.\n\n# Adding geom_bar() to ggplot() function. Adds gray bars to plot ordered by number of hikes per category. Background is grey with white lines\nggplot(hikes, aes(x = rating)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n# Adding function labs() to previous functions. Adds labels to axes.\nggplot(hikes, aes(x = rating)) +\n  geom_bar() +\n  labs(x = \"Rating\", y = \"Number of hikes\")\n\n\n\n\n\n\n\n\n# Adding \"fill\" command to geom_bar() function. Changes bar color to blue \nggplot(hikes, aes(x = rating)) +\n  geom_bar(fill = \"blue\") +\n  labs(x = \"Rating\", y = \"Number of hikes\")\n\n\n\n\n\n\n\n\n# Adding command \"color\" to geom_bar() function. Adds an orange outline to blue bars.\nggplot(hikes, aes(x = rating)) +\n  geom_bar(color = \"orange\", fill = \"blue\") +\n  labs(x = \"Rating\", y = \"Number of hikes\")\n\n\n\n\n\n\n\n\n# Adding function theme_minimal. This makes the chart background white with grey lines.\nggplot(hikes, aes(x = rating)) +\n  geom_bar(color = \"orange\", fill = \"blue\")  +\n  labs(x = \"Rating\", y = \"Number of hikes\") +\n  theme_minimal()",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Univariate Viz</span>"
    ]
  },
  {
    "objectID": "ica/ica-uni.html#exercise-5-bar-chart-follow-up",
    "href": "ica/ica-uni.html#exercise-5-bar-chart-follow-up",
    "title": "Univariate Viz",
    "section": "Exercise 5: Bar Chart Follow-up",
    "text": "Exercise 5: Bar Chart Follow-up\nPart A\n\n\n+ is used by ggplot() to string together different functions required to create plots in R.\nThe “geom” in geom_bar() indicates that the function is defining the type of visualization being used for the data.\n\nlabs() stands for “labels.”\n\ncolor colors the border of the bar, while fill colors the full bar.\nPart B\nMost hikes in the Adirondacks are of moderate difficulty.\nPart C\nI don’t like that the difficutly levels are not in a logical ordering; ordering them by difficulty makes them more logical than by bar height.",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Univariate Viz</span>"
    ]
  },
  {
    "objectID": "ica/ica-uni.html#exercise-6-sad-bar-chart",
    "href": "ica/ica-uni.html#exercise-6-sad-bar-chart",
    "title": "Univariate Viz",
    "section": "Exercise 6: Sad Bar Chart",
    "text": "Exercise 6: Sad Bar Chart\n\n# Construct bar chart of the quantitative elevation variable\nggplot(hikes, aes(x = elevation)) +\n  geom_bar()\n\n\n\n\n\n\n\nThis is not an effective visualization for this variable. The bars are hard to read, and due to the continuous nature of the elevation variable, the chart doesn’t effectively communicate the distribution of hike elevations.",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Univariate Viz</span>"
    ]
  },
  {
    "objectID": "ica/ica-uni.html#exercise-7-a-histogram-of-elevation",
    "href": "ica/ica-uni.html#exercise-7-a-histogram-of-elevation",
    "title": "Univariate Viz",
    "section": "Exercise 7: A Histogram of Elevation",
    "text": "Exercise 7: A Histogram of Elevation\nHistograms are constructed by (1) dividing up the observed range of the variable into ‘bins’ of equal width; and (2) counting up the number of cases that fall into each bin. Compared to bar graphs, this allows for better visualization of rather disparate data where many different values exist.",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Univariate Viz</span>"
    ]
  },
  {
    "objectID": "ica/ica-uni.html#exercise-8-building-histograms---part-1",
    "href": "ica/ica-uni.html#exercise-8-building-histograms---part-1",
    "title": "Univariate Viz",
    "section": "Exercise 8: Building Histograms - Part 1",
    "text": "Exercise 8: Building Histograms - Part 1\nggplot(hikes, aes(x = elevation)) will probably be followed by a line with the function geom_hist() or something like that",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Univariate Viz</span>"
    ]
  },
  {
    "objectID": "ica/ica-uni.html#exercise-9-building-histograms---part-2",
    "href": "ica/ica-uni.html#exercise-9-building-histograms---part-2",
    "title": "Univariate Viz",
    "section": "Exercise 9: Building Histograms - Part 2",
    "text": "Exercise 9: Building Histograms - Part 2\n\n# Adding function geom_histogram() creates a histogram, although an error message appears suggesting different bin width.\nggplot(hikes, aes(x = elevation)) +\n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\n# Adding \"color\" command to geom_histogram again adds outlines to each bin\nggplot(hikes, aes(x = elevation)) +\n  geom_histogram(color = \"white\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\n# \"Fill\" changes the colors of the bins to blue.\nggplot(hikes, aes(x = elevation)) +\n  geom_histogram(color = \"white\", fill = \"blue\") \n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\n# labs(x =, y =) adds labels.\nggplot(hikes, aes(x = elevation)) +\n  geom_histogram(color = \"white\") +\n  labs(x = \"Elevation (feet)\", y = \"Number of hikes\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\n# \"binwidth\" assigns a value to the bin size, in this case 1000 feet, which is too wide to be helpful.\nggplot(hikes, aes(x = elevation)) +\n  geom_histogram(color = \"white\", binwidth = 1000) +\n  labs(x = \"Elevation (feet)\", y = \"Number of hikes\")\n\n\n\n\n\n\n\n\n# This makes the bin width 5 feet. Bins are now too narrow to read or to show any patterns in the data.\nggplot(hikes, aes(x = elevation)) +\n  geom_histogram(color = \"white\", binwidth = 5) +\n  labs(x = \"Elevation (feet)\", y = \"Number of hikes\")\n\n\n\n\n\n\n\n\n# This makes the bin width 200 feet. This is much more readable while still showing variations in data.\nggplot(hikes, aes(x = elevation)) +\n  geom_histogram(color = \"white\", binwidth = 200) +\n  labs(x = \"Elevation (feet)\", y = \"Number of hikes\")",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Univariate Viz</span>"
    ]
  },
  {
    "objectID": "ica/ica-uni.html#exercise-10-histogram-follow-up",
    "href": "ica/ica-uni.html#exercise-10-histogram-follow-up",
    "title": "Univariate Viz",
    "section": "Exercise 10: Histogram Follow-up",
    "text": "Exercise 10: Histogram Follow-up\n\n\ngeom_histogram adds the histogram geometry.\n\ncolor and fill have the same function as with the bar graphs, but color here helps make the histogram more readable by distinguishing each bin.\n\nbinwidth is also an important part or readability. In this case, 9 bins (200 feet per bin) were most effective.",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Univariate Viz</span>"
    ]
  },
  {
    "objectID": "ica/ica-uni.html#exercise-11-density-plots",
    "href": "ica/ica-uni.html#exercise-11-density-plots",
    "title": "Univariate Viz",
    "section": "Exercise 11: Density Plots",
    "text": "Exercise 11: Density Plots\nDensity plots are essentially smooth versions of the histogram. Instead of sorting observations into discrete bins, the “density” of observations is calculated across the entire range of outcomes. The greater the number of observations, the greater the density! The density is then scaled so that the area under the density curve always equals 1 and the area under any fraction of the curve represents the fraction of cases that lie in that range.\n\nggplot(hikes, aes(x = elevation)) +\n  geom_density()\n\n\n\n\n\n\n\n\n# testing \"color\" with respect to density plots\nggplot(hikes, aes(x = elevation)) +\n  geom_density(color = \"pink\")\n\n\n\n\n\n\n\n\n# testing \"fill\" with respect to density plots\nggplot(hikes, aes(x = elevation)) +\n  geom_density(fill = \"orange\")",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Univariate Viz</span>"
    ]
  },
  {
    "objectID": "ica/ica-uni.html#exercise-12-density-plots-vs-histograms",
    "href": "ica/ica-uni.html#exercise-12-density-plots-vs-histograms",
    "title": "Univariate Viz",
    "section": "Exercise 12: Density Plots vs Histograms",
    "text": "Exercise 12: Density Plots vs Histograms\n\nDensity plots: communicate ranges and typical outcomes more effectively, especially with large n, but fall short in expressing discrete amounts of variables.\nHistograms: better visualize discrete ranges of data and are better at looking at small chunks of data in context, while are not as good at offering analysis of data trends.",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Univariate Viz</span>"
    ]
  },
  {
    "objectID": "ica/ica-uni.html#exercise-13-code-communication",
    "href": "ica/ica-uni.html#exercise-13-code-communication",
    "title": "Univariate Viz",
    "section": "Exercise 13: Code = communication",
    "text": "Exercise 13: Code = communication\nImportant to indent lines of code after first line for long strings, and place line breaks after each +",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Univariate Viz</span>"
    ]
  },
  {
    "objectID": "ica/ica-uni.html#exercise-14-practice",
    "href": "ica/ica-uni.html#exercise-14-practice",
    "title": "Univariate Viz",
    "section": "Exercise 14: Practice",
    "text": "Exercise 14: Practice\n\n# Data on students in this class\nsurvey &lt;- read.csv(\"https://hash-mac.github.io/stat112site-s25/data/survey.csv\")\n# Reviewing variables\nhead(survey)\n\n         cafe_mac minutes_to_campus fav_temp_c       hangout\n1 mashed potatoes                 5         26 the mountains\n2        is tasty                 5         28        a city\n3          burger                 5         19      a forest\n4    caesar salad                12         18      a forest\n5       ice cream                 0         24 the mountains\n6           tofu                 10        -10 the mountains\n\n\n\n# Creating bar graph for hangout\nggplot(survey, aes(x = hangout)) +\n  geom_bar(fill = \"grey\") +\n  labs(x = \"ideal hangout\", y = \"# of students\") +\n  theme_light()\n\n\n\n\n\n\n\n\n# Creating density plot for fav_temp_c\nggplot(survey, aes(x = fav_temp_c)) +\n  geom_density(fill = \"gray\") +\n  labs(x = \"Fav Temp (°C)\", y = \"Density\") +\n  theme_linedraw()\n\n\n\n\n\n\n\n\n# Creating histogram for minutes_to_campus\nggplot(survey, aes(minutes_to_campus)) +\n  geom_histogram(color = \"white\", fill = \"gray\", binwidth = 5) +\n  labs(x = \"Minutes to Campus\", y = \"# of Students\") +\n  theme_light()",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Univariate Viz</span>"
    ]
  },
  {
    "objectID": "ica/ica-bi.html",
    "href": "ica/ica-bi.html",
    "title": "Bivariate Viz",
    "section": "",
    "text": "Exercise 0: Review",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Bivariate Viz</span>"
    ]
  },
  {
    "objectID": "ica/ica-bi.html#exercise-0-review",
    "href": "ica/ica-bi.html#exercise-0-review",
    "title": "Bivariate Viz",
    "section": "",
    "text": "Part A\n\n# Plot of winner variable\nggplot(elections, aes(x = winner_20)) +\n  geom_bar(fill = \"grey\") +\n  labs(x = \"Winner\", y = \"Counties Won\") +\n  theme_light()\n\n\n\n\n\n\n\nPart B\n\n# Plot repub_pct_20 variable\nggplot(elections, aes(x = repub_pct_20)) +\n  geom_histogram(binwidth = 10, color = \"white\", fill = \"grey\") +\n  labs(x = \"% Republican\", y = \"# Counties\") +\n  theme_light()\n\n\n\n\n\n\n\nThese two graphs tell us that a) Republicans won the vast majority of counties in 2020 and b) they won most of those counties by &gt;50%. However, Democrats won in 2020, leading me to assume that a population comparison would be a more effective data visualization.",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Bivariate Viz</span>"
    ]
  },
  {
    "objectID": "ica/ica-bi.html#exercise-1-quantitative-vs-quantitative-intuition-check",
    "href": "ica/ica-bi.html#exercise-1-quantitative-vs-quantitative-intuition-check",
    "title": "Bivariate Viz",
    "section": "Exercise 1: Quantitative vs Quantitative Intuition Check",
    "text": "Exercise 1: Quantitative vs Quantitative Intuition Check\nScatterplot setup: geom_scatterplot? With the lead function ggplot(elections, aes(x = , y = )) rather than just x =.",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Bivariate Viz</span>"
    ]
  },
  {
    "objectID": "ica/ica-bi.html#exercise-2-2-quantitiative-variables",
    "href": "ica/ica-bi.html#exercise-2-2-quantitiative-variables",
    "title": "Bivariate Viz",
    "section": "Exercise 2: 2 Quantitiative Variables",
    "text": "Exercise 2: 2 Quantitiative Variables\nScatterplots\n\n# Set up the plotting frame\n# How does this differ than the frame for our histogram of repub_pct_20 alone?\n# Frame has variables on both axes\nggplot(elections, aes(y = repub_pct_20, x = repub_pct_16))\n\n\n\n\n\n\n\n\n# Add a layer of points for each county\n# Take note of the geom!\nggplot(elections, aes(y = repub_pct_20, x = repub_pct_16)) +\n  geom_point()\n\n\n\n\n\n\n\n\n# Change the shape of the points\n# What happens if you change the shape to another number?\nggplot(elections, aes(y = repub_pct_20, x = repub_pct_16)) +\n  geom_point(shape = 3)\n\n\n\n\n\n\n\n\n# Change the shape of the points\n# What happens if you change the shape to another number?\nggplot(elections, aes(y = repub_pct_20, x = repub_pct_16)) +\n  geom_point(shape = 40)\n\n\n\n\n\n\n\n\n# YOU TRY: Modify the code to make the points \"orange\"\n# NOTE: Try to anticipate if \"color\" or \"fill\" will be useful here. Then try both.\nggplot(elections, aes(y = repub_pct_20, x = repub_pct_16)) +\n  geom_point(color = \"pink\")\n\n\n\n\n\n\n\n\n# YOU TRY: Modify the code to make the points \"orange\"\n# NOTE: Try to anticipate if \"color\" or \"fill\" will be useful here. Then try both.\nggplot(elections, aes(y = repub_pct_20, x = repub_pct_16)) +\n  geom_point(fill = \"pink\")\n\n\n\n\n\n\n\n\n# YOU TRY: Modify the code to make the points \"orange\"\n# NOTE: Try to anticipate if \"color\" or \"fill\" will be useful here. Then try both.\n# Color is the only command that works with dot plots\nggplot(elections, aes(y = repub_pct_20, x = repub_pct_16)) +\n  geom_point(color = \"pink\", fill = \"red\")\n\n\n\n\n\n\n\n\n# Add a layer that represents each county by the state it's in\n# Take note of the geom and the info it needs to run!\nggplot(elections, aes(y = repub_pct_20, x = repub_pct_16)) +\n  geom_text(aes(label = state_abbr))",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Bivariate Viz</span>"
    ]
  },
  {
    "objectID": "ica/ica-bi.html#exercise-3-reflect",
    "href": "ica/ica-bi.html#exercise-3-reflect",
    "title": "Bivariate Viz",
    "section": "Exercise 3: Reflect",
    "text": "Exercise 3: Reflect\n\nRelationship is very strong, linear; most counties are similar to the 2016 election.\nThe direction is positive.\nMost deviations are from counties skewing more Republican in 2020. These counties are mostly in Utah, Idaho, and Texas. This may be explained by interstate migration (ID & UT) or voter disenfranchisement tactics (TX), or could just be due to perceived inadequacies of the Democratic establishment.",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Bivariate Viz</span>"
    ]
  },
  {
    "objectID": "ica/ica-bi.html#exercise-4-visualizing-trend",
    "href": "ica/ica-bi.html#exercise-4-visualizing-trend",
    "title": "Bivariate Viz",
    "section": "Exercise 4: Visualizing trend",
    "text": "Exercise 4: Visualizing trend\n\nggplot(elections, aes(y = repub_pct_20, x = repub_pct_16)) +\n  geom_point() +\n  geom_smooth()\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n\n\n\n\n\n\n\n\nPart A\n\n# Construct linear plot from point data\nggplot(elections, aes(y = repub_pct_20, x = repub_pct_16)) +\n  geom_smooth()\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n\n\n\n\n\n\n\n\nPart B\n\n# Find best linear model; line of best fit\nggplot(elections, aes(y = repub_pct_20, x = repub_pct_16)) +\n  geom_point() +\n  geom_smooth(method = \"lm\")\n\n`geom_smooth()` using formula = 'y ~ x'",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Bivariate Viz</span>"
    ]
  },
  {
    "objectID": "ica/ica-bi.html#exercise-5-your-turn",
    "href": "ica/ica-bi.html#exercise-5-your-turn",
    "title": "Bivariate Viz",
    "section": "Exercise 5: Your Turn",
    "text": "Exercise 5: Your Turn\n\n# Scatterplot of repub_pct_20 vs median_rent\nggplot(elections, aes(y = repub_pct_20, x = median_rent)) +\n  geom_point() +\n  geom_smooth()\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n\n\n\n\n\n\n\n# Scatterplot of repub_pct_20 vs median_age\nggplot(elections, aes(y = repub_pct_20, x = median_age)) +\n  geom_point() +\n  geom_smooth()\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n\n\n\n\n\n\n\n\nMedian rent is a slightly better predictor of election outcomes: Republican votes negatively correlate with higher rents, except for in the lowest rent areas.",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Bivariate Viz</span>"
    ]
  },
  {
    "objectID": "ica/ica-bi.html#exercise-6-a-sad-scatterplot",
    "href": "ica/ica-bi.html#exercise-6-a-sad-scatterplot",
    "title": "Bivariate Viz",
    "section": "Exercise 6: A Sad Scatterplot",
    "text": "Exercise 6: A Sad Scatterplot\n\nggplot(elections, aes(y = repub_pct_20, x = historical)) +\n  geom_point()\n\n\n\n\n\n\n\nThis does not work because the data is not legible and except for a few outliers it is impossible to identify any real trends.",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Bivariate Viz</span>"
    ]
  },
  {
    "objectID": "ica/ica-bi.html#exercise-7-quantitative-vs-categorical-violins-boxes",
    "href": "ica/ica-bi.html#exercise-7-quantitative-vs-categorical-violins-boxes",
    "title": "Bivariate Viz",
    "section": "Exercise 7: Quantitative vs Categorical – Violins & Boxes",
    "text": "Exercise 7: Quantitative vs Categorical – Violins & Boxes\n\n# Side-by-side violin plots\nggplot(elections, aes(y = repub_pct_20, x = historical)) +\n  geom_violin()\n\n\n\n\n\n\n\n\n# Side-by-side boxplots (defined below)\nggplot(elections, aes(y = repub_pct_20, x = historical)) +\n  geom_boxplot()\n\n\n\n\n\n\n\nOn average, county support is &gt;50% on average, but is lower in blue sttes than purple states, and lower in purple states than in red states.",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Bivariate Viz</span>"
    ]
  },
  {
    "objectID": "ica/ica-bi.html#exercise-8-quantitative-vs-categorical-intuition-check",
    "href": "ica/ica-bi.html#exercise-8-quantitative-vs-categorical-intuition-check",
    "title": "Bivariate Viz",
    "section": "Exercise 8: Quantitative vs Categorical – Intuition Check",
    "text": "Exercise 8: Quantitative vs Categorical – Intuition Check\n\nggplot(elections, aes(x = repub_pct_20, fill = historical)) +\n  geom_density()",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Bivariate Viz</span>"
    ]
  },
  {
    "objectID": "ica/ica-bi.html#exercise-9-quantitative-vs-categorical-density-plots",
    "href": "ica/ica-bi.html#exercise-9-quantitative-vs-categorical-density-plots",
    "title": "Bivariate Viz",
    "section": "Exercise 9: Quantitative vs Categorical – Density Plots",
    "text": "Exercise 9: Quantitative vs Categorical – Density Plots\n\n# Name two \"bad\" things about this plot\n# 1. Colors don't mqtch, blue and purple graphs not fully visible.\nggplot(elections, aes(x = repub_pct_20, fill = historical)) +\n  geom_density()\n\n\n\n\n\n\n\n\n# scale_fill_manual allows us to pick the fill colors by hand.\nggplot(elections, aes(x = repub_pct_20, fill = historical)) +\n  geom_density() +\n  scale_fill_manual(values = c(\"blue\", \"purple\", \"red\"))\n\n\n\n\n\n\n\n\n# alpha = 0.5 reduces the opacity of the fill colors in order to see the rest of the data.\n# Play around with different values of alpha, between 0 and 1\nggplot(elections, aes(x = repub_pct_20, fill = historical)) +\n  geom_density(alpha = 0.5) +\n  scale_fill_manual(values = c(\"blue\", \"purple\", \"red\"))\n\n\n\n\n\n\n\n\n# facet_wrap facets each peak, as divided by historical data.\nggplot(elections, aes(x = repub_pct_20, fill = historical)) +\n  geom_density() +\n  scale_fill_manual(values = c(\"blue\", \"purple\", \"red\")) +\n  facet_wrap(~ historical)\n\n\n\n\n\n\n\n\n# Let's try a similar grouping strategy with a histogram instead of density plot.\n# Why is this terrible? This doesn't work because the blue data is barely visible and doesn't tell us anything\nggplot(elections, aes(x = repub_pct_20, fill = historical)) +\n  geom_histogram(color = \"white\") +\n  scale_fill_manual(values = c(\"blue\", \"purple\", \"red\"))\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Bivariate Viz</span>"
    ]
  },
  {
    "objectID": "ica/ica-bi.html#exercise-10",
    "href": "ica/ica-bi.html#exercise-10",
    "title": "Bivariate Viz",
    "section": "Exercise 10",
    "text": "Exercise 10\n\nDensity plots are more visually compelling and is easier to compare the full set of data, while box plots better capture data variation.",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Bivariate Viz</span>"
    ]
  },
  {
    "objectID": "ica/ica-bi.html#exercise-11-categorical-vs-categorical-intuition-check",
    "href": "ica/ica-bi.html#exercise-11-categorical-vs-categorical-intuition-check",
    "title": "Bivariate Viz",
    "section": "Exercise 11: Categorical vs Categorical – Intuition Check",
    "text": "Exercise 11: Categorical vs Categorical – Intuition Check\n\nggplot(elections, aes(x = historical, fill = winner_20)) +\n  geom_bar() +\n  scale_fill_manual(values = c(\"red\", \"blue\"))\n\n\n\n\n\n\n\n\nggplot(elections, aes(x = winner_20)) +\n  geom_bar() +\n  facet_wrap(~ historical)",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Bivariate Viz</span>"
    ]
  },
  {
    "objectID": "ica/ica-bi.html#exercise-12-categorical-vs-categorical",
    "href": "ica/ica-bi.html#exercise-12-categorical-vs-categorical",
    "title": "Bivariate Viz",
    "section": "Exercise 12: Categorical vs Categorical",
    "text": "Exercise 12: Categorical vs Categorical\n\n# A stacked bar plot\n# How are the \"historical\" and \"winner_20\" variables mapped to the plot, i.e. what roles do they play?\nggplot(elections, aes(x = historical, fill = winner_20)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n# A faceted bar plot\nggplot(elections, aes(x = winner_20)) +\n  geom_bar() +\n  facet_wrap(~ historical)\n\n\n\n\n\n\n\n\n# A side-by-side bar plot\n# Note the new argument to geom_bar\nggplot(elections, aes(x = historical, fill = winner_20)) +\n  geom_bar(position = \"dodge\")\n\n\n\n\n\n\n\n\n# A proportional bar plot\n# Note the new argument to geom_bar\nggplot(elections, aes(x = historical, fill = winner_20)) +\n  geom_bar(position = \"fill\")",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Bivariate Viz</span>"
    ]
  },
  {
    "objectID": "ica/ica-bi.html#exercise-13-practice-now-or-later",
    "href": "ica/ica-bi.html#exercise-13-practice-now-or-later",
    "title": "Bivariate Viz",
    "section": "Exercise 13: Practice (now or later)",
    "text": "Exercise 13: Practice (now or later)\n\nweather &lt;- read.csv(\"https://mac-stat.github.io/data/weather_3_locations.csv\")\nhead(weather)\n\n        date   location mintemp maxtemp rainfall evaporation sunshine\n1 2020-01-01 Wollongong    17.1    23.1        0          NA       NA\n2 2020-01-02 Wollongong    17.7    24.2        0          NA       NA\n3 2020-01-03 Wollongong    19.7    26.8        0          NA       NA\n4 2020-01-04 Wollongong    20.4    35.5        0          NA       NA\n5 2020-01-05 Wollongong    19.8    21.4        0          NA       NA\n6 2020-01-06 Wollongong    18.3    22.9        0          NA       NA\n  windgustdir windgustspeed winddir9am winddir3pm windspeed9am windspeed3pm\n1         SSW            39        SSW        SSE           20           15\n2         SSW            37          S        ENE           13           15\n3          NE            41        NNW        NNE            7           17\n4         SSW            78         NE        NNE           15           17\n5         SSW            57        SSW          S           31           35\n6          NE            35        ESE         NE           17           20\n  humidity9am humidity3pm pressure9am pressure3pm cloud9am cloud3pm temp9am\n1          69          64      1014.9      1014.0        8        1    19.1\n2          72          54      1020.1      1017.7        7        1    19.8\n3          72          71      1017.5      1013.0        6       NA    23.4\n4          77          69      1008.8      1003.9       NA       NA    24.5\n5          70          75      1018.9      1019.9       NA        7    20.7\n6          71          71      1021.2      1018.2       NA       NA    20.9\n  temp3pm raintoday risk_mm raintomorrow\n1    22.9        No     0.0           No\n2    23.6        No     0.0           No\n3    25.7        No     0.0           No\n4    26.7        No     0.0           No\n5    20.0        No     0.0           No\n6    22.6        No     0.8           No\n\n\n\n# How do 3pm temperatures (temp3pm) differ by location?\nggplot(weather, aes(x = location, y = temp3pm)) +\n  geom_violin() +\n  theme_light()\n\nWarning: Removed 19 rows containing non-finite outside the scale range\n(`stat_ydensity()`).\n\n\n\n\n\n\n\n\n\n# How might we predict the 3pm temperature (temp3pm) by the 9am temperature (temp9am)?\nggplot(weather, aes(x = temp9am, y = temp3pm)) + \n  geom_point() +\n  geom_smooth() +\n  theme_light()\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n\n\nWarning: Removed 27 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\nWarning: Removed 27 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n# How do the number of rainy days (raintoday) differ by location?\nggplot(weather, aes(x = location, fill = raintoday)) +\n  geom_bar() +\n  theme_light()",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Bivariate Viz</span>"
    ]
  },
  {
    "objectID": "ica/ica-bi.html#optional",
    "href": "ica/ica-bi.html#optional",
    "title": "Bivariate Viz",
    "section": "Optional",
    "text": "Optional\nPart A: Joy Plots\n\n# Install ggridges package\nlibrary(ggridges)\nlibrary(forcats)\n\n# Make our first joy plot\n# THINK: What DON'T you like about this?\nggplot(elections, aes(x = repub_pct_20, y = state_abbr)) + \n  geom_density_ridges()\n\nPicking joint bandwidth of 4.43\n\n\n\n\n\n\n\n\n\n# Let's put the states in order by Republican support, not alphabet\n# How do you think fct_reorder works? We'll learn about this later in the semester.\nggplot(elections, aes(x = repub_pct_20, y = fct_reorder(state_abbr, repub_pct_20), fill = historical)) + \n  geom_density_ridges(alpha = 0.5) +\n  scale_fill_manual(values = c(\"blue\", \"purple\", \"red\")) +\n  labs(x = \"% Republican\", y = \"State\", fill = \"Historical Trends\") +\n  theme_light()\n\nPicking joint bandwidth of 4.43",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Bivariate Viz</span>"
    ]
  },
  {
    "objectID": "ica/ica-multi.html",
    "href": "ica/ica-multi.html",
    "title": "9  Mulivariate Viz",
    "section": "",
    "text": "Use this file for practice with the mulivariate viz in-class activity. Refer to the class website for details.",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Mulivariate Viz</span>"
    ]
  },
  {
    "objectID": "ica/ica-spatial.html",
    "href": "ica/ica-spatial.html",
    "title": "\n10  Spatial Viz\n",
    "section": "",
    "text": "── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\n10.0.1 Preview\nYou’ll explore some R spatial viz tools below. In general, there are two important pieces to every map:\nPiece 1: A dataset\nThis dataset must include either:\n\nlocation coordinates for your points of interest (for point maps); or\nvariable outcomes for your regions of interest (for choropleth maps)\n\n\nPiece 2: A background map\nWe need latitude and longitude coordinates to specify the boundaries for your regions of interest (eg: countries, states). This is where it gets really sticky!\n\nCounty-level, state-level, country-level, continent-level info live in multiple places.\nWhere we grab this info can depend upon whether we want to make a point map or a choropleth map. (The background maps can be used somewhat interchangeably, but it requires extra code :/)\nWhere we grab this info can also depend upon the structure of our data and how much data wrangling / cleaning we’re up for. For choropleth maps, the labels of regions in our data must match those in the background map. For example, if our data labels states with their abbreviations (eg: MN) and the background map refers to them as full names in lower case (eg: minnesota), we have to wrangle our data so that it matches the background map.\n\nIn short, the code for spatial viz gets very specialized. The goal of these exercises is to:\n\nplay around and experience the wide variety of spatial viz tools out there\nunderstand the difference between point maps and choropleth maps\nhave fun\n\nYou can skip around as you wish and it’s totally fine if you don’t finish everything. Just come back at some point to play around.\nPart 1: Interactive points on a map with leaflet\n\nLeaflet is an open-source JavaScript library for creating maps. We can use it inside R through the leaflet package.\nThis uses a different plotting framework than ggplot2, but still has a tidyverse feel (which will become more clear as we learn other tidyverse tools!).\nThe general steps are as follows:\n\nCreate a map widget by calling leaflet() and telling it the data to use.\nAdd a base map using addTiles() (the default) or addProviderTiles().\nAdd layers to the map using layer functions (e.g. addMarkers(), addPolygons()).\nPrint the map widget to display it.\nExercise 1: A leaflet with markers / points\nEarlier this semester, I asked for the latitude and longitude of one of your favorite places. I rounded these to the nearest whole number, so that they’re near to but not exactly at those places. Let’s load the data and map it!\n\nfave_places &lt;- read.csv(\"https://hash-mac.github.io/stat112site-s25/data/our_fave_places.csv\")\n\n# Check it out\nhead(fave_places)\n\n  latitude longitude\n1       59        18\n2       45       -93\n3       33      -117\n4       40       116\n5       40       106\n6       37      -122\n\n\nPart a\nYou can use a “two-finger scroll” to zoom in and out.\n\n# Load the leaflet package\nlibrary(leaflet)\n\n# Just a plotting frame\nleaflet(data = fave_places)\n\n\n\n\n\n\n# Now what do we have?\nleaflet(data = fave_places) |&gt; \n  addTiles()\n\n\n\n\n\n\n# Now what do we have?\n# longitude and latitude refer to the variables in our data\nleaflet(data = fave_places) |&gt; \n  addTiles() |&gt; \n  addMarkers(lng = ~longitude, lat = ~latitude)\n\n\n\n\n\n\n# Since we named them \"longitude\" and \"latitude\", the function\n# automatically recognizes these variables. No need to write them!\nleaflet(data = fave_places) |&gt; \n  addTiles() |&gt; \n  addMarkers()\n\n\n\n\n\nPart b\nPLAY AROUND! This map is interactive. Zoom in on one location. Keep zooming – what level of detail can you get into? How does that detail depend upon where you try to zoom in (thus what are the limitations of this tool)?\nExercise 2: Details\nWe can change all sorts of details in leaflet maps.\n\n# Load package needed to change color\nlibrary(gplots)\n\n\nAttaching package: 'gplots'\n\n\nThe following object is masked from 'package:stats':\n\n    lowess\n\n# We can add colored circles instead of markers at each location\nleaflet(data = fave_places) |&gt; \n  addTiles() |&gt; \n  addCircles(color = col2hex(\"red\"))\n\n\n\n\n\n\n# We can change the background\n# Mark locations with yellow dots\n# And connect the dots, in their order in the dataset, with green lines\n# (These green lines don't mean anything here, but would if this were somebody's travel path!)\nleaflet(data = fave_places) |&gt;\n  addProviderTiles(\"USGS\") |&gt;\n  addCircles(weight = 10, opacity = 1, color = col2hex(\"yellow\")) |&gt;\n  addPolylines(\n    lng = ~longitude,\n    lat = ~latitude,\n    color = col2hex(\"green\")\n  )\n\n\n\n\n\nIn general:\n\naddProviderTiles() changes the base map.\nTo explore all available provider base maps, type providers in the console. (Though some don’t work :/)\n\nUse addMarkers() or addCircles() to mark locations. Type ?addControl into the console to pull up a help file which summarizes the aesthetics of these markers and how you can change them. For example:\n\n\nweight = how thick to make the lines, points, pixels\n\nopacity = transparency (like alpha in ggplot2)\ncolors need to be in “hex” form. We used the col2hex() function from the gplots library to do that\n\n\nExercise 3: Your turn\nThe starbucks data, compiled by Danny Kaplan, contains information about every Starbucks in the world at the time the data were collected, including Latitude and Longitude:\n\n# Import starbucks location data\nstarbucks &lt;- read.csv(\"https://mac-stat.github.io/data/starbucks.csv\")\n\nLet’s focus on only those in Minnesota for now:\n\n# Don't worry about the syntax\nstarbucks_mn &lt;- starbucks |&gt;   \n  filter(Country == \"US\", State.Province == \"MN\")\n\nCreate a leaflet map of the Starbucks locations in Minnesota. Keep it simple – go back to Exercise 1 for an example.\n\n# Leaflet map of starbucks in minnesota\nleaflet(data = starbucks_mn) |&gt;\n  addTiles() |&gt;\n  addCircles(color = col2hex(\"green\"))\n\nAssuming \"Longitude\" and \"Latitude\" are longitude and latitude, respectively\n\n\n\n\n\n\nPart 2: Static points on a map\nLeaflet is very powerful and fun. But:\n\nIt’s not great when we have lots of points to map – it takes lots of time.\nIt makes good interactive maps, but we often need a static map (eg: we can not print interactive maps!).\n\nLet’s explore how to make point maps with ggplot(), not leaflet().\nExercise 3: A simple scatterplot\nLet’s start with the ggplot() tools we already know. Construct a scatterplot of all starbucks locations, not just those in Minnesota, with:\n\nLatitude and Longitude coordinates (which goes on the y-axis?!)\nMake the points transparent (alpha = 0.2) and smaller (size = 0.2)\n\nIt’s pretty cool that the plots we already know can provide some spatial context. But what don’t you like about this plot?\n\nggplot(starbucks, aes(x = Longitude, y = Latitude)) +\n  geom_point()\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\nExercise 4: Adding a country-level background\nLet’s add a background map of country-level boundaries.\nPart a\nFirst, we can grab country-level boundaries from the rnaturalearth package.\n\n# Load the package\nlibrary(rnaturalearth)\n\n# Get info about country boundaries across the world\n# in a \"sf\" or simple feature format\nworld_boundaries &lt;- ne_countries(returnclass = \"sf\")\n\nIn your console, type world_boundaries to check out what’s stored there. Don’t print it our in your Rmd – printing it would be really messy there (even just the head()).\nPart b\nRun the chunks below to build up a new map.\n\n# What does this code produce?\n# What geom are we using for the point map?\nggplot(world_boundaries) + \n  geom_sf()\n\n\n\n\n\n\n\n\n# Load package needed to change map theme\nlibrary(mosaic)\n\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\n\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\n\n\nAttaching package: 'mosaic'\n\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n\n# Add a point for each Starbucks\n# NOTE: The Starbucks info is in our starbucks data, not world_boundaries\n# How does this change how we use geom_point?!\nggplot(world_boundaries) + \n  geom_sf() + \n  geom_point(\n    data = starbucks,\n    aes(x = Longitude, y = Latitude),\n    alpha = 0.3, size = 0.2, color = \"darkgreen\"\n  ) +\n  theme_map()\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\nPart c\nSummarize what you learned about Starbucks from this map.\nExercise 5: Zooming in on some countries\nInstead of world_boundaries &lt;- ne_countries(returnclass = 'sf') we could zoom in on…\n\nthe continent of Africa: ne_countries(continent = 'Africa', returnclass = 'sf')\n\na set of countries: ne_countries(country = c('france', 'united kingdom', 'germany'), returnclass = 'sf')\n\nboundaries within a country: ne_states(country = 'united states of america', returnclass = 'sf')\n\n\nOur goal here will be to map the Starbucks locations in Canada, Mexico, and the US.\nPart a\nTo make this map, we again need two pieces of information.\n\nData on Starbucks for only Canada, Mexico, and the US, labeled as “CA”, “MX”, “US” in the starbucks data.\n\n\n# We'll learn this syntax soon! Don't worry about it now.\nstarbucks_cma &lt;- starbucks |&gt; \n  filter(Country %in% c('CA', 'MX', 'US'))\n\n\nA background map of state- and national-level boundaries in Canada, Mexico, and the US. This requires ne_states() in the rnaturalearth package where the countries are labeled ‘canada’, ‘mexico’, ‘united states of america’.\n\n\ncma_boundaries &lt;- ne_states(\n  country = c(\"canada\", \"mexico\", \"united states of america\"),\n  returnclass = \"sf\")\n\nPart b\nMake the map!\n\n# Just the boundaries\nggplot(cma_boundaries) + \n  geom_sf()\n\n\n\n\n\n\n\n\n# Add the points\n# And zoom in\nggplot(cma_boundaries) + \n  geom_sf() + \n  geom_point(\n    data = starbucks_cma,\n    aes(x = Longitude, y = Latitude),\n    alpha = 0.3,\n    size = 0.2,\n    color = \"darkgreen\"\n  ) +\n  coord_sf(xlim = c(-179.14, -50)) +\n  theme_map()\n\n\n\n\n\n\n\nExercise 6: A state and county-level map\nLet’s get an even higher resolution map of Starbucks locations within the states of Minnesota, Wisconsin, North Dakota, and South Dakota, with a background map at the county-level.\nPart a\nTo make this map, we again need two pieces of information.\n\nData on Starbucks for only the states of interest.\n\n\nstarbucks_midwest &lt;- starbucks |&gt; \n  filter(State.Province %in% c(\"MN\", \"ND\", \"SD\", \"WI\"))\n\n\nA background map of state- and county-level boundaries in these states. This requires st_as_sf() in the sf package, and map() in the maps package, where the countries are labeled ‘minnesota’, ‘north dakota’, etc.\n\n\n# Load packages\nlibrary(sf)\n\nLinking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE\n\nlibrary(maps)\n\n\nAttaching package: 'maps'\n\n\nThe following object is masked from 'package:purrr':\n\n    map\n\n# Get the boundaries\nmidwest_boundaries &lt;- st_as_sf(\n  maps::map(\"county\",\n            region = c(\"minnesota\", \"wisconsin\", \"north dakota\", \"south dakota\"), \n            fill = TRUE, plot = FALSE))\n\n# Check it out\nhead(midwest_boundaries)\n\nSimple feature collection with 6 features and 1 field\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -96.81268 ymin: 45.05167 xmax: -93.01397 ymax: 48.53526\nGeodetic CRS:  +proj=longlat +ellps=clrk66 +no_defs +type=crs\n                                     ID                           geom\nminnesota,aitkin       minnesota,aitkin MULTIPOLYGON (((-93.03689 4...\nminnesota,anoka         minnesota,anoka MULTIPOLYGON (((-93.51817 4...\nminnesota,becker       minnesota,becker MULTIPOLYGON (((-95.14537 4...\nminnesota,beltrami   minnesota,beltrami MULTIPOLYGON (((-95.58655 4...\nminnesota,benton       minnesota,benton MULTIPOLYGON (((-93.77027 4...\nminnesota,big stone minnesota,big stone MULTIPOLYGON (((-96.10794 4...\n\n\nPart b\nAdjust the code below to make the plot! Remove the # to run it.\n\nggplot(midwest_boundaries) + \n  geom_sf() + \n  geom_point(\n     data = starbucks_mn,\n     aes(x = Longitude, y = Latitude),\n     alpha = 0.7,\n     size = 0.2, \n     color = 'darkgreen'\n   ) + \n   theme_map()\n\n\n\n\n\n\n\nExercise 7: Contour maps\nEspecially when there are lots of point locations, and those locations start overlapping on a map, it can be tough to visualize areas of higher density. Consider the Starbucks locations in Canada, Mexico, and the US that we mapped earlier:\n\n# Point map (we made this earlier)\nggplot(cma_boundaries) + \n  geom_sf() + \n  geom_point(\n    data = starbucks_cma,\n    aes(x = Longitude, y = Latitude),\n    alpha = 0.3,\n    size = 0.2,\n    color = \"darkgreen\"\n  ) +\n  coord_sf(xlim = c(-179.14, -50), ylim = c(14.54, 83.11)) +\n  theme_map()\n\n\n\n\n\n\n\nNow check out the contour map.\n\n# What changed in the plot?\n# What changed in our code?!\nggplot(cma_boundaries) + \n  geom_sf() + \n  geom_density_2d(\n    data = starbucks_cma,\n    aes(x = Longitude, y = Latitude),\n    size = 0.2,\n    color = \"darkgreen\"\n  ) +\n  coord_sf(xlim = c(-179.14, -50), ylim = c(14.54, 83.11)) +\n  theme_map()\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\nPart 3: Choropleth maps\nSpatial data isn’t always in the form of point locations! For example, recall the state and county-level data on presidential elections.\n\nelections_by_state &lt;-  read.csv(\"https://mac-stat.github.io/data/election_2020_by_state.csv\")\nelections_by_counties &lt;- read.csv(\"https://mac-stat.github.io/data/election_2020_county.csv\")\n\nIn these datasets, we’re interested in the overall election outcome by region (state or county), not the specific geographic location of some observation. Let’s wrangle our data first. We’ll focus on just a few variables of interest, and create a new variable (repub_20_categories) that discretizes the repub_pct_20 variable into increments of 5 percentage points (for states) or 10 percentage points (for counties):\n\n# Don't worry about the code!\n\nelections_by_state &lt;- elections_by_state |&gt; \n  filter(state_abbr != \"DC\") |&gt; \n  select(state_name, state_abbr, repub_pct_20) |&gt; \n  mutate(repub_20_categories = \n           cut(repub_pct_20, \n               breaks = seq(30, 70, by = 5), \n               labels = c(\"30-34\", \"35-39\", \"40-44\", \"45-49\",\n                          \"50-54\", \"55-59\", \"60-64\", \"65-70\"), \n               include.lowest = TRUE))\n\nelections_by_counties &lt;- elections_by_counties |&gt; \n  select(state_name, state_abbr, county_name, county_fips,\n          repub_pct_20, median_age, median_rent) |&gt; \n  mutate(repub_20_categories = \n           cut(repub_pct_20, \n               breaks = seq(0, 100, by = 10),\n               labels = c(\"0-9\", \"10-19\", \"20-29\", \"30-39\", \"40-49\",\n                          \"50-59\", \"60-69\", \"70-79\", \"80-89\", \"90-100\"),\n               include.lowest = TRUE))\n\nExercise 8: State-level choropleth maps\nLet’s map the 2020 Republican support in each state, repub_pct_20.\nPart a\nWe again need two pieces of information.\n\nData on elections in each state, which we already have: elections_by_state.\nA background map of state boundaries in the US. The boundaries we used for point maps don’t work here. (Optional detail: they’re sf objects and we now need a data.frame object.) Instead, we can use the map_data() function from the ggplot2 package:\n\n\n# Get the latitude and longitude coordinates of state boundaries\nstates_map &lt;- map_data(\"state\")\n\n# Check it out\nhead(states_map)\n\n       long      lat group order  region subregion\n1 -87.46201 30.38968     1     1 alabama      &lt;NA&gt;\n2 -87.48493 30.37249     1     2 alabama      &lt;NA&gt;\n3 -87.52503 30.37249     1     3 alabama      &lt;NA&gt;\n4 -87.53076 30.33239     1     4 alabama      &lt;NA&gt;\n5 -87.57087 30.32665     1     5 alabama      &lt;NA&gt;\n6 -87.58806 30.32665     1     6 alabama      &lt;NA&gt;\n\n\nPause\nImportant detail: Note that the region variable in states_map, and the state_name variable in elections_by_state both label states by the full name in lower case letters. This is critical to the background map and our data being able to communicate.\n\nhead(states_map)\n\n       long      lat group order  region subregion\n1 -87.46201 30.38968     1     1 alabama      &lt;NA&gt;\n2 -87.48493 30.37249     1     2 alabama      &lt;NA&gt;\n3 -87.52503 30.37249     1     3 alabama      &lt;NA&gt;\n4 -87.53076 30.33239     1     4 alabama      &lt;NA&gt;\n5 -87.57087 30.32665     1     5 alabama      &lt;NA&gt;\n6 -87.58806 30.32665     1     6 alabama      &lt;NA&gt;\n\nhead(elections_by_state) \n\n   state_name state_abbr repub_pct_20 repub_20_categories\n1     alabama         AL        62.03               60-64\n2    arkansas         AR        62.40               60-64\n3     arizona         AZ        49.06               45-49\n4  california         CA        34.33               30-34\n5    colorado         CO        41.90               40-44\n6 connecticut         CT        39.21               35-39\n\n\nPart b\nNow map repub_pct_20 by state.\n\n# Note where the dataset, elections_by_state, is used\n# Note where the background map, states_map, is used\nggplot(elections_by_state, aes(map_id = state_name, fill = repub_pct_20)) +\n  geom_map(map = states_map) +\n  expand_limits(x = states_map$long, y = states_map$lat) +\n  theme_map() \n\n\n\n\n\n\n\n\n# Make it nicer!\nggplot(elections_by_state, aes(map_id = state_name, fill = repub_pct_20)) +\n  geom_map(map = states_map) +\n  expand_limits(x = states_map$long, y = states_map$lat) +\n  theme_map() + \n  scale_fill_gradientn(name = \"% Republican\", colors = c(\"blue\", \"purple\", \"red\"), values = scales::rescale(seq(0, 100, by = 5)))\n\n\n\n\n\n\n\nIt’s not easy to get fine control over the color scale for the quantitative repub_pct_20 variable. Instead, let’s plot the discretized version, repub_20_categories:\n\nggplot(elections_by_state, aes(map_id = state_name, fill = repub_20_categories)) +\n  geom_map(map = states_map) +\n  expand_limits(x = states_map$long, y = states_map$lat) +\n  theme_map()\n\n\n\n\n\n\n\n\n# Load package needed for refining color palette\nlibrary(RColorBrewer)\n\n# Now fix the colors\nggplot(elections_by_state, aes(map_id = state_name, fill = repub_20_categories)) +\n  geom_map(map = states_map) +\n  expand_limits(x = states_map$long, y = states_map$lat) +\n  theme_map() + \n  scale_fill_manual(values = rev(brewer.pal(8, \"RdBu\")), name = \"% Republican\")\n\n\n\n\n\n\n\nPart c\nWe can add other layers, like points, on top of a choropleth map. Add a Starbucks layer! Do you notice any relationship between Starbucks and elections? Or are we just doing things at this point? ;)\n\n# Get only the starbucks data from the US\nstarbucks_us &lt;- starbucks |&gt; \n  filter(Country == \"US\")\n\n# Map it\nggplot(elections_by_state, aes(map_id = state_name, fill = repub_20_categories)) +\n  geom_map(map = states_map) +\n  geom_point(\n    data = starbucks_us,\n    aes(x = Longitude, y = Latitude),\n    size = 0.05,\n    alpha = 0.2,\n    inherit.aes = FALSE\n  ) +\n  expand_limits(x = states_map$long, y = states_map$lat) +\n  theme_map() + \n  scale_fill_manual(values = rev(brewer.pal(8, \"RdBu\")), name = \"% Republican\")\n\n\n\n\n\n\n\nDetails (if you’re curious)\n\n\nmap_id is a required aesthetic for geom_map().\n\nIt specifies which variable in our dataset indicates the region (here state_name).\nIt connects this variable (state_name) to the region variable in our mapping background (states_map). These variables must have the same possible outcomes in order to be matched up (alabama, alaska, arizona,…).\n\n\n\nexpand_limits() assures that the map covers the entire area it’s supposed to, by pulling longitudes and latitudes from the states_map.\nPart d\nWe used geom_sf() for point maps. What geom do we use for choropleth maps?\nExercise 9: County-level choropleth maps\nLet’s map the 2020 Republican support in each county.\nPart a\nWe again need two pieces of information.\n\nData on elections in each county, which we already have: elections_by_county.\nA background map of county boundaries in the US, stored in the county_map dataset in the socviz package:\n\n\n# Get the latitude and longitude coordinates of county boundaries\nlibrary(socviz)\ndata(county_map) \n\n# Check it out\nhead(county_map)\n\n     long      lat order  hole piece            group    id\n1 1225889 -1275020     1 FALSE     1 0500000US01001.1 01001\n2 1235324 -1274008     2 FALSE     1 0500000US01001.1 01001\n3 1244873 -1272331     3 FALSE     1 0500000US01001.1 01001\n4 1244129 -1267515     4 FALSE     1 0500000US01001.1 01001\n5 1272010 -1262889     5 FALSE     1 0500000US01001.1 01001\n6 1276797 -1295514     6 FALSE     1 0500000US01001.1 01001\n\n\nPause\nImportant detail: We officially have a headache. Our county_map refers to each county by a 5-number id. Our elections_by_counties data refers to each county by a county_fips code, which is mostly the same as id, BUT drops any 0’s at the beginning of the code.\n\nhead(county_map)\n\n     long      lat order  hole piece            group    id\n1 1225889 -1275020     1 FALSE     1 0500000US01001.1 01001\n2 1235324 -1274008     2 FALSE     1 0500000US01001.1 01001\n3 1244873 -1272331     3 FALSE     1 0500000US01001.1 01001\n4 1244129 -1267515     4 FALSE     1 0500000US01001.1 01001\n5 1272010 -1262889     5 FALSE     1 0500000US01001.1 01001\n6 1276797 -1295514     6 FALSE     1 0500000US01001.1 01001\n\nhead(elections_by_counties)\n\n  state_name state_abbr    county_name county_fips repub_pct_20 median_age\n1    Alabama         AL Autauga County        1001        71.44       37.5\n2    Alabama         AL Baldwin County        1003        76.17       41.5\n3    Alabama         AL Barbour County        1005        53.45       38.3\n4    Alabama         AL    Bibb County        1007        78.43       39.4\n5    Alabama         AL  Blount County        1009        89.57       39.6\n6    Alabama         AL Bullock County        1011        24.84       39.6\n  median_rent repub_20_categories\n1         668               70-79\n2         693               70-79\n3         382               50-59\n4         351               70-79\n5         403               80-89\n6         276               20-29\n\n\nThis just means that we have to wrangle the data so that it can communicate with the background map.\n\n# Add 0's at the beginning of any fips_code that's fewer than 5 numbers long\n# Don't worry about the syntax\nelections_by_counties &lt;- elections_by_counties |&gt; \n  mutate(county_fips = as.character(county_fips)) |&gt; \n  mutate(county_fips = \n           ifelse(nchar(county_fips) == 4, paste0(\"0\", county_fips), county_fips))\n\nPart b\nNow map Republican support by county. Let’s go straight to the discretized repub_20_categories variable, and a good color scale.\n\nggplot(elections_by_counties, aes(map_id = county_fips, fill = repub_20_categories)) +\n  geom_map(map = county_map) +\n  scale_fill_manual(values = rev(brewer.pal(10, \"RdBu\")), name = \"% Republican\") +\n  expand_limits(x = county_map$long, y = county_map$lat) +\n  theme_map() +\n  theme(legend.position = \"right\") + \n  coord_equal()\n\n\n\n\n\n\n\nExercise 10: Play around!\nConstruct county-level maps of median_rent and median_age.\n\nggplot(elections_by_counties, aes(map_id = county_fips, fill = median_rent)) +\n  geom_map(map = county_map) +\n  expand_limits(x = county_map$long, y = county_map$lat) +\n  theme_map() +\n  scale_fill_gradientn(name = \"Median Rent\", colors = c(\"yellow\", \"orange\", \"red\")) +\n  theme(legend.position = \"right\") + \n  coord_equal()\n\n\n\n\n\n\n\n\nggplot(elections_by_counties, aes(map_id = county_fips, fill = median_age)) +\n  geom_map(map = county_map) +\n  expand_limits(x = county_map$long, y = county_map$lat) +\n  theme_map() +\n  scale_fill_gradientn(name = \"Median Age\", colors = c(\"white\", \"blue\")) +\n  theme(legend.position = \"right\") + \n  coord_equal()\n\n\n\n\n\n\n\nExercise 11: Choropleth maps with leaflet\nThough ggplot() is often better for this purpose, we can also make choropleth maps with leaflet(). If you’re curious, check out the leaflet documentation:\nhttps://rstudio.github.io/leaflet/choropleths.html",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Spatial Viz</span>"
    ]
  },
  {
    "objectID": "ica/ica-wrangling.html",
    "href": "ica/ica-wrangling.html",
    "title": "Wrangling",
    "section": "",
    "text": "Exercise 1: select Practice\n# Define elections_small\nelections_small &lt;- elections |&gt;\n  select(state_name, county_name, total_votes_20, repub_pct_20, dem_pct_20, total_votes_16, dem_pct_16)\n\n# Check out the first 6 rows to confirm your code did what you think it did!\nhead(elections_small)\n\n  state_name    county_name total_votes_20 repub_pct_20 dem_pct_20\n1    Alabama Autauga County          27770        71.44      27.02\n2    Alabama Baldwin County         109679        76.17      22.41\n3    Alabama Barbour County          10518        53.45      45.79\n4    Alabama    Bibb County           9595        78.43      20.70\n5    Alabama  Blount County          27588        89.57       9.57\n6    Alabama Bullock County           4613        24.84      74.70\n  total_votes_16 dem_pct_16\n1          24661      23.96\n2          94090      19.57\n3          10390      46.66\n4           8748      21.42\n5          25384       8.47\n6           4701      75.09",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Wrangling</span>"
    ]
  },
  {
    "objectID": "ica/ica-wrangling.html#exercise-2-filter-demo",
    "href": "ica/ica-wrangling.html#exercise-2-filter-demo",
    "title": "Wrangling",
    "section": "Exercise 2: filter Demo",
    "text": "Exercise 2: filter Demo\n\n# Keep only data on counties in Hawaii\nelections_small |&gt;\n filter(state_name == \"Hawaii\")\n\n  state_name     county_name total_votes_20 repub_pct_20 dem_pct_20\n1     Hawaii   Hawaii County          87814        30.63      66.88\n2     Hawaii Honolulu County         382114        35.66      62.51\n3     Hawaii    Kauai County          33497        34.58      63.36\n4     Hawaii     Maui County          71044        31.14      66.59\n  total_votes_16 dem_pct_16\n1          64865      63.61\n2         285683      61.48\n3          26335      62.49\n4          51942      64.45\n\n# Check\nhead(elections_small)\n\n  state_name    county_name total_votes_20 repub_pct_20 dem_pct_20\n1    Alabama Autauga County          27770        71.44      27.02\n2    Alabama Baldwin County         109679        76.17      22.41\n3    Alabama Barbour County          10518        53.45      45.79\n4    Alabama    Bibb County           9595        78.43      20.70\n5    Alabama  Blount County          27588        89.57       9.57\n6    Alabama Bullock County           4613        24.84      74.70\n  total_votes_16 dem_pct_16\n1          24661      23.96\n2          94090      19.57\n3          10390      46.66\n4           8748      21.42\n5          25384       8.47\n6           4701      75.09\n\n\n\n# What does this do?\nelections_small |&gt;\n  filter(state_name %in% c(\"Hawaii\", \"Delaware\"))\n\n  state_name       county_name total_votes_20 repub_pct_20 dem_pct_20\n1   Delaware       Kent County          87025        47.12      51.19\n2   Delaware New Castle County         287633        30.72      67.81\n3   Delaware     Sussex County         129352        55.07      43.82\n4     Hawaii     Hawaii County          87814        30.63      66.88\n5     Hawaii   Honolulu County         382114        35.66      62.51\n6     Hawaii      Kauai County          33497        34.58      63.36\n7     Hawaii       Maui County          71044        31.14      66.59\n  total_votes_16 dem_pct_16\n1          74253      44.91\n2         261468      62.30\n3         105814      37.17\n4          64865      63.61\n5         285683      61.48\n6          26335      62.49\n7          51942      64.45\n\n\n\n# Keep only data on counties where the Republican got MORE THAN 93.97% of the vote in 2020\nelections_small |&gt;\n  filter(repub_pct_20 &gt; \"93.97\")\n\n  state_name    county_name total_votes_20 repub_pct_20 dem_pct_20\n1      Texas  Borden County            416        95.43       3.85\n2      Texas    King County            159        94.97       5.03\n3      Texas Roberts County            550        96.18       3.09\n  total_votes_16 dem_pct_16\n1            365       8.49\n2            159       3.14\n3            550       3.64\n\n# THINK: What variable is relevant here?\n\n\n# Keep only data on counties where the Republican got AT LEAST 93.97% of the vote in 2020\nelections_small |&gt;\n  filter(repub_pct_20 &gt;= 93.97)\n\n  state_name     county_name total_votes_20 repub_pct_20 dem_pct_20\n1    Montana Garfield County            813        93.97       5.04\n2      Texas   Borden County            416        95.43       3.85\n3      Texas     King County            159        94.97       5.03\n4      Texas  Roberts County            550        96.18       3.09\n  total_votes_16 dem_pct_16\n1            715       4.76\n2            365       8.49\n3            159       3.14\n4            550       3.64\n\n# This should have 1 more row (observation) than your answer above\n\n\n# Keep only data on counties in Texas where the Democrat got more than 65% of the vote in 2020\n# Do this 2 ways.\n# Method 1: 2 filters with 1 condition each\nelections_small |&gt;\n  filter(state_name == \"Texas\") |&gt;\n  filter(dem_pct_20 &gt; 65)\n\n  state_name     county_name total_votes_20 repub_pct_20 dem_pct_20\n1      Texas  El Paso County         267215        31.56      66.66\n2      Texas Presidio County           2217        32.52      65.99\n3      Texas   Travis County         610349        26.43      71.41\n4      Texas   Zavala County           4379        34.03      65.40\n  total_votes_16 dem_pct_16\n1         210458      69.14\n2           2203      66.18\n3         462511      66.26\n4           3390      77.67\n\n# Method 2: 1 filter with 2 conditions\nelections_small |&gt;\n filter(state_name == \"Texas\", dem_pct_20 &gt; 65)\n\n  state_name     county_name total_votes_20 repub_pct_20 dem_pct_20\n1      Texas  El Paso County         267215        31.56      66.66\n2      Texas Presidio County           2217        32.52      65.99\n3      Texas   Travis County         610349        26.43      71.41\n4      Texas   Zavala County           4379        34.03      65.40\n  total_votes_16 dem_pct_16\n1         210458      69.14\n2           2203      66.18\n3         462511      66.26\n4           3390      77.67",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Wrangling</span>"
    ]
  },
  {
    "objectID": "ica/ica-wrangling.html#exercise-3-arrange-demo",
    "href": "ica/ica-wrangling.html#exercise-3-arrange-demo",
    "title": "Wrangling",
    "section": "Exercise 3: arrange Demo",
    "text": "Exercise 3: arrange Demo\n\n# Arrange the counties in elections_small from lowest to highest percentage of 2020 Republican support\n# Print out just the first 6 rows\nelections_small |&gt;\n  arrange(repub_pct_20) |&gt;\n  head()\n\n            state_name            county_name total_votes_20 repub_pct_20\n1 District of Columbia   District of Columbia         344356         5.40\n2             Maryland Prince George's County         424855         8.73\n3             Maryland         Baltimore city         237461        10.69\n4             Virginia        Petersburg city          14118        11.22\n5             New York        New York County         694904        12.26\n6           California   San Francisco County         443458        12.72\n  dem_pct_20 total_votes_16 dem_pct_16\n1      92.15         280272      92.85\n2      89.26         351091      89.33\n3      87.28         208980      85.44\n4      87.75          13717      87.52\n5      86.78         591368      87.17\n6      85.27         365295      85.53\n\n\n\n# Arrange the counties in elections_small from highest to lowest percentage of 2020 Republican support\n# Print out just the first 6 rows\nelections_small |&gt;\n  arrange(desc(repub_pct_20)) |&gt;\n  head()\n\n  state_name      county_name total_votes_20 repub_pct_20 dem_pct_20\n1      Texas   Roberts County            550        96.18       3.09\n2      Texas    Borden County            416        95.43       3.85\n3      Texas      King County            159        94.97       5.03\n4    Montana  Garfield County            813        93.97       5.04\n5      Texas Glasscock County            653        93.57       5.97\n6   Nebraska     Grant County            402        93.28       4.98\n  total_votes_16 dem_pct_16\n1            550       3.64\n2            365       8.49\n3            159       3.14\n4            715       4.76\n5            602       5.65\n6            394       5.08",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Wrangling</span>"
    ]
  },
  {
    "objectID": "ica/ica-wrangling.html#exercise-4-mutate-demo",
    "href": "ica/ica-wrangling.html#exercise-4-mutate-demo",
    "title": "Wrangling",
    "section": "Exercise 4: mutate Demo",
    "text": "Exercise 4: mutate Demo\nPart a\n\n# What did this code do?\nelections_small |&gt;\n  mutate(diff_20 = repub_pct_20 - dem_pct_20) |&gt;\n  head()\n\n  state_name    county_name total_votes_20 repub_pct_20 dem_pct_20\n1    Alabama Autauga County          27770        71.44      27.02\n2    Alabama Baldwin County         109679        76.17      22.41\n3    Alabama Barbour County          10518        53.45      45.79\n4    Alabama    Bibb County           9595        78.43      20.70\n5    Alabama  Blount County          27588        89.57       9.57\n6    Alabama Bullock County           4613        24.84      74.70\n  total_votes_16 dem_pct_16 diff_20\n1          24661      23.96   44.42\n2          94090      19.57   53.76\n3          10390      46.66    7.66\n4           8748      21.42   57.73\n5          25384       8.47   80.00\n6           4701      75.09  -49.86\n\n\n\n# What did this code do?\nelections_small |&gt;\n  mutate(repub_votes_20 = round(total_votes_20 * repub_pct_20/100)) |&gt;\n  head()\n\n  state_name    county_name total_votes_20 repub_pct_20 dem_pct_20\n1    Alabama Autauga County          27770        71.44      27.02\n2    Alabama Baldwin County         109679        76.17      22.41\n3    Alabama Barbour County          10518        53.45      45.79\n4    Alabama    Bibb County           9595        78.43      20.70\n5    Alabama  Blount County          27588        89.57       9.57\n6    Alabama Bullock County           4613        24.84      74.70\n  total_votes_16 dem_pct_16 repub_votes_20\n1          24661      23.96          19839\n2          94090      19.57          83542\n3          10390      46.66           5622\n4           8748      21.42           7525\n5          25384       8.47          24711\n6           4701      75.09           1146\n\n\n\n# What did this code do?\nelections_small |&gt;\n  mutate(repub_win_20 = repub_pct_20 &gt; dem_pct_20) |&gt;\n  head()\n\n  state_name    county_name total_votes_20 repub_pct_20 dem_pct_20\n1    Alabama Autauga County          27770        71.44      27.02\n2    Alabama Baldwin County         109679        76.17      22.41\n3    Alabama Barbour County          10518        53.45      45.79\n4    Alabama    Bibb County           9595        78.43      20.70\n5    Alabama  Blount County          27588        89.57       9.57\n6    Alabama Bullock County           4613        24.84      74.70\n  total_votes_16 dem_pct_16 repub_win_20\n1          24661      23.96         TRUE\n2          94090      19.57         TRUE\n3          10390      46.66         TRUE\n4           8748      21.42         TRUE\n5          25384       8.47         TRUE\n6           4701      75.09        FALSE\n\n\nPart b\n\n# You try\n# Define a variable that calculates the change in Dem support in 2020 vs 2016\nelections_small |&gt;\n mutate(dem_pct_change = dem_pct_16 - dem_pct_20) |&gt;\n head()\n\n  state_name    county_name total_votes_20 repub_pct_20 dem_pct_20\n1    Alabama Autauga County          27770        71.44      27.02\n2    Alabama Baldwin County         109679        76.17      22.41\n3    Alabama Barbour County          10518        53.45      45.79\n4    Alabama    Bibb County           9595        78.43      20.70\n5    Alabama  Blount County          27588        89.57       9.57\n6    Alabama Bullock County           4613        24.84      74.70\n  total_votes_16 dem_pct_16 dem_pct_change\n1          24661      23.96          -3.06\n2          94090      19.57          -2.84\n3          10390      46.66           0.87\n4           8748      21.42           0.72\n5          25384       8.47          -1.10\n6           4701      75.09           0.39\n\n\n\n# You try\n# Define a variable that determines whether the Dem support was higher in 2020 than in 2016 (TRUE/FALSE)\nelections_small |&gt;\n mutate(dem_gains_20 = dem_pct_20 &gt; dem_pct_16) |&gt;\n head()\n\n  state_name    county_name total_votes_20 repub_pct_20 dem_pct_20\n1    Alabama Autauga County          27770        71.44      27.02\n2    Alabama Baldwin County         109679        76.17      22.41\n3    Alabama Barbour County          10518        53.45      45.79\n4    Alabama    Bibb County           9595        78.43      20.70\n5    Alabama  Blount County          27588        89.57       9.57\n6    Alabama Bullock County           4613        24.84      74.70\n  total_votes_16 dem_pct_16 dem_gains_20\n1          24661      23.96         TRUE\n2          94090      19.57         TRUE\n3          10390      46.66        FALSE\n4           8748      21.42        FALSE\n5          25384       8.47         TRUE\n6           4701      75.09        FALSE",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Wrangling</span>"
    ]
  },
  {
    "objectID": "ica/ica-wrangling.html#exercise-5-pipe-series",
    "href": "ica/ica-wrangling.html#exercise-5-pipe-series",
    "title": "Wrangling",
    "section": "Exercise 5: Pipe Series",
    "text": "Exercise 5: Pipe Series\n\nelections_small |&gt;\n  filter(state_name == \"Wisconsin\",\n         repub_pct_20 &lt; dem_pct_20) |&gt;\n  arrange(desc(total_votes_20)) |&gt;\n  head()\n\n  state_name       county_name total_votes_20 repub_pct_20 dem_pct_20\n1  Wisconsin  Milwaukee County         458971        29.27      69.13\n2  Wisconsin       Dane County         344791        22.85      75.46\n3  Wisconsin       Rock County          85360        43.51      54.66\n4  Wisconsin  La Crosse County          67884        42.25      55.75\n5  Wisconsin Eau Claire County          58275        43.49      54.26\n6  Wisconsin    Portage County          40603        47.53      50.31\n  total_votes_16 dem_pct_16\n1         434970      66.44\n2         304729      71.38\n3          75043      52.42\n4          62785      51.61\n5          54080      50.43\n6          38123      48.59\n\n\n\n# Now try it. Change the order of filter and arrange below.\nelections_small |&gt;\n  arrange(desc(total_votes_20)) |&gt;\n  filter(state_name == \"Wisconsin\",\n         repub_pct_20 &lt; dem_pct_20) |&gt;\n  head()\n\n  state_name       county_name total_votes_20 repub_pct_20 dem_pct_20\n1  Wisconsin  Milwaukee County         458971        29.27      69.13\n2  Wisconsin       Dane County         344791        22.85      75.46\n3  Wisconsin       Rock County          85360        43.51      54.66\n4  Wisconsin  La Crosse County          67884        42.25      55.75\n5  Wisconsin Eau Claire County          58275        43.49      54.26\n6  Wisconsin    Portage County          40603        47.53      50.31\n  total_votes_16 dem_pct_16\n1         434970      66.44\n2         304729      71.38\n3          75043      52.42\n4          62785      51.61\n5          54080      50.43\n6          38123      48.59\n\n\n\nelections_small |&gt;\n  filter(state_name == \"Delaware\") |&gt;\n  mutate(repub_win_20 = repub_pct_20 &gt; dem_pct_20) |&gt;\n  select(county_name, repub_pct_20, dem_pct_20, repub_win_20)\n\n        county_name repub_pct_20 dem_pct_20 repub_win_20\n1       Kent County        47.12      51.19        FALSE\n2 New Castle County        30.72      67.81        FALSE\n3     Sussex County        55.07      43.82         TRUE\n\n\n\n# Now try it. Change the order of mutate and select below.\n# elections_small |&gt;\n#  filter(state_name == \"Delaware\") |&gt;\n#  select(county_name, repub_pct_20, dem_pct_20, repub_win_20)|&gt;\n#  mutate(repub_win_20 = repub_pct_20 &gt; dem_pct_20)",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Wrangling</span>"
    ]
  },
  {
    "objectID": "ica/ica-wrangling.html#exercise-6-diy-pipe-series",
    "href": "ica/ica-wrangling.html#exercise-6-diy-pipe-series",
    "title": "Wrangling",
    "section": "Exercise 6: DIY Pipe Series",
    "text": "Exercise 6: DIY Pipe Series\nPart a\n\n# Show just the counties in Minnesota and their Democratic 2020 vote percentage, from highest to lowest.\nelections_small |&gt;\n  filter(state_name == \"Minnesota\") |&gt;\n  select(county_name, dem_pct_20) |&gt;\n  arrange(desc(dem_pct_20))\n\n                county_name dem_pct_20\n1             Ramsey County      71.50\n2           Hennepin County      70.46\n3               Cook County      65.58\n4          St. Louis County      56.64\n5             Dakota County      55.73\n6            Olmsted County      54.16\n7         Washington County      53.46\n8         Blue Earth County      50.84\n9               Clay County      50.74\n10              Lake County      50.64\n11          Nicollet County      50.31\n12           Carlton County      49.58\n13            Winona County      49.07\n14              Rice County      48.76\n15          Mahnomen County      48.26\n16             Anoka County      47.79\n17          Beltrami County      47.24\n18            Carver County      46.37\n19             Mower County      46.00\n20             Scott County      45.52\n21           Houston County      42.42\n22           Goodhue County      41.23\n23          Freeborn County      40.96\n24            Norman County      40.80\n25            Itasca County      40.61\n26       Koochiching County      38.41\n27          Watonwan County      38.20\n28           Kittson County      38.12\n29           Stevens County      37.80\n30           Stearns County      37.58\n31          Fillmore County      37.48\n32            Steele County      37.47\n33         Kandiyohi County      36.12\n34            Aitkin County      35.98\n35              Lyon County      35.94\n36     Lac qui Parle County      35.79\n37           Wabasha County      35.78\n38             Grant County      35.58\n39          Traverse County      35.46\n40         Big Stone County      35.41\n41        Pennington County      35.29\n42              Pope County      35.27\n43              Polk County      34.88\n44              Cass County      34.68\n45            Wright County      34.49\n46           Hubbard County      34.42\n47             Swift County      34.35\n48         Crow Wing County      34.17\n49           Chisago County      34.15\n50            Becker County      33.96\n51              Pine County      33.87\n52          Le Sueur County      33.73\n53          Chippewa County      33.67\n54            Nobles County      33.65\n55            Waseca County      33.65\n56             Dodge County      33.47\n57        Otter Tail County      32.85\n58            Benton County      32.70\n59           Douglas County      32.56\n60             Brown County      32.48\n61         Sherburne County      32.48\n62         Faribault County      31.98\n63          Red Lake County      31.47\n64          Renville County      30.71\n65            McLeod County      30.64\n66   Yellow Medicine County      30.54\n67           Lincoln County      30.08\n68        Cottonwood County      30.03\n69           Kanabec County      30.02\n70            Martin County      30.02\n71           Jackson County      29.99\n72        Mille Lacs County      29.98\n73            Wilkin County      29.91\n74              Rock County      29.69\n75            Murray County      29.60\n76            Isanti County      29.45\n77            Sibley County      28.60\n78            Meeker County      28.58\n79           Redwood County      28.43\n80 Lake of the Woods County      27.87\n81        Clearwater County      26.76\n82         Pipestone County      26.44\n83            Wadena County      26.35\n84            Roseau County      25.98\n85          Marshall County      25.33\n86              Todd County      24.79\n87          Morrison County      22.33\n\n\nPart b\n\n# Create a new dataset named mn_wi that sorts the counties in Minnesota and Wisconsin from lowest to highest in terms of the change in Democratic vote percentage in 2020 vs 2016. This dataset should include the following variables (and only these variables): state_name, county_name, dem_pct_20, dem_pct_16, and a variable measuring the change in Democratic vote percentage in 2020 vs 2016.\n# Define the dataset\n# Only store the results once you're confident that they're correct\nmn_wi &lt;- elections |&gt;\n  filter(state_name %in% c(\"Minnesota\", \"Wisconsin\")) |&gt;\n  mutate(dem_pct_change = dem_pct_16 - dem_pct_20) |&gt;\n  select(state_name, county_name, dem_pct_20, dem_pct_16, dem_pct_change) |&gt;\n  arrange(dem_pct_20)",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Wrangling</span>"
    ]
  },
  {
    "objectID": "ica/ica-wrangling.html#part-c",
    "href": "ica/ica-wrangling.html#part-c",
    "title": "Wrangling",
    "section": "Part c",
    "text": "Part c\n\n# Construct and discuss a plot of the county-level change in Democratic vote percent in 2020 vs 2016, and how this differs between Minnesota and Wisconsin.\nggplot(mn_wi, aes(x = dem_pct_change, fill = state_name)) +\n  geom_density(alpha = 0.5) +\n  theme_light() +\n  labs(x = \"Change in Democratic Vote Share (% points)\", fill = \"State\", title = \"MN and WI Democratic Presidential Votes by County in 2016 & 2020\")",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Wrangling</span>"
    ]
  },
  {
    "objectID": "ica/ica-wrangling.html#exercise-7-summarize-demo",
    "href": "ica/ica-wrangling.html#exercise-7-summarize-demo",
    "title": "Wrangling",
    "section": "Exercise 7: summarize Demo",
    "text": "Exercise 7: summarize Demo\n\n# What does this do?\nelections_small |&gt;\n  summarize(median(repub_pct_20))\n\n  median(repub_pct_20)\n1                68.29\n\n\n\n# What does this do?\nelections_small |&gt;\n  summarize(median_repub = median(repub_pct_20))\n\n  median_repub\n1        68.29\n\n\n\n# What does this do?\nelections_small |&gt;\n  summarize(median_repub = median(repub_pct_20), total_votes = sum(total_votes_20))\n\n  median_repub total_votes\n1        68.29   157949293",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Wrangling</span>"
    ]
  },
  {
    "objectID": "ica/ica-wrangling.html#exercise-8-summarize-group_by-demo",
    "href": "ica/ica-wrangling.html#exercise-8-summarize-group_by-demo",
    "title": "Wrangling",
    "section": "Exercise 8: summarize + group_by demo",
    "text": "Exercise 8: summarize + group_by demo\n\nelections_small |&gt;\n  group_by(state_name)\n\n# A tibble: 3,109 × 7\n# Groups:   state_name [50]\n   state_name county_name  total_votes_20 repub_pct_20 dem_pct_20 total_votes_16\n   &lt;chr&gt;      &lt;chr&gt;                 &lt;int&gt;        &lt;dbl&gt;      &lt;dbl&gt;          &lt;int&gt;\n 1 Alabama    Autauga Cou…          27770         71.4      27.0           24661\n 2 Alabama    Baldwin Cou…         109679         76.2      22.4           94090\n 3 Alabama    Barbour Cou…          10518         53.4      45.8           10390\n 4 Alabama    Bibb County            9595         78.4      20.7            8748\n 5 Alabama    Blount Coun…          27588         89.6       9.57          25384\n 6 Alabama    Bullock Cou…           4613         24.8      74.7            4701\n 7 Alabama    Butler Coun…           9488         57.5      41.8            8685\n 8 Alabama    Calhoun Cou…          50983         68.8      29.8           47376\n 9 Alabama    Chambers Co…          15284         57.3      41.6           13778\n10 Alabama    Cherokee Co…          12301         86.0      13.2           10503\n# ℹ 3,099 more rows\n# ℹ 1 more variable: dem_pct_16 &lt;dbl&gt;\n\n\n\n# Check out the structure before and after group_by\nelections_small |&gt;\n  class()\n\n[1] \"data.frame\"\n\nelections_small |&gt;\n  group_by(state_name) |&gt;\n  class()\n\n[1] \"grouped_df\" \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\n\n# What does this do?\n# (What if we didn't use group_by?)\nelections_small |&gt;\n  group_by(state_name) |&gt;\n  summarize(median_repub = median(repub_pct_20), total_votes = sum(total_votes_20))\n\n# A tibble: 50 × 3\n   state_name           median_repub total_votes\n   &lt;chr&gt;                       &lt;dbl&gt;       &lt;int&gt;\n 1 Alabama                      70.6     2323304\n 2 Arizona                      57.9     3387326\n 3 Arkansas                     72.1     1219069\n 4 California                   44.8    17495906\n 5 Colorado                     56.2     3256953\n 6 Connecticut                  41.0     1824280\n 7 Delaware                     47.1      504010\n 8 District of Columbia          5.4      344356\n 9 Florida                      64.6    11067456\n10 Georgia                      68       4997716\n# ℹ 40 more rows",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Wrangling</span>"
    ]
  },
  {
    "objectID": "ica/ica-wrangling.html#exercise-9-diy",
    "href": "ica/ica-wrangling.html#exercise-9-diy",
    "title": "Wrangling",
    "section": "Exercise 9: DIY",
    "text": "Exercise 9: DIY\n\n# Sort the *states* from the most to least total votes cast in 2020\nelections_small |&gt;\n  group_by(state_name) |&gt;\n  summarize(median_repub = median(repub_pct_20), total_votes = sum(total_votes_20)) |&gt;\n  arrange(desc(total_votes))\n\n# A tibble: 50 × 3\n   state_name     median_repub total_votes\n   &lt;chr&gt;                 &lt;dbl&gt;       &lt;int&gt;\n 1 California             44.8    17495906\n 2 Texas                  78.6    11317911\n 3 Florida                64.6    11067456\n 4 New York               53.7     8616205\n 5 Pennsylvania           66.9     6925255\n 6 Illinois               68.8     6038850\n 7 Ohio                   70.1     5922202\n 8 Michigan               62.1     5539302\n 9 North Carolina         59.8     5524801\n10 Georgia                68       4997716\n# ℹ 40 more rows\n\n\n\n# In 2020, what were the total number of votes for the Democratic candidate and the total number of votes for the Republican candidate in each *state*?\nelections_small |&gt;\n  mutate(\n    repub_votes = round(total_votes_20 * repub_pct_20/100),\n    dem_votes = round(total_votes_20 * dem_pct_20/100)\n  ) |&gt;\n  group_by(state_name) |&gt;\n  summarise(total_dem = sum(dem_votes), total_repub = sum(repub_votes))\n\n# A tibble: 50 × 3\n   state_name           total_dem total_repub\n   &lt;chr&gt;                    &lt;dbl&gt;       &lt;dbl&gt;\n 1 Alabama                 849664     1441155\n 2 Arizona                1672127     1661671\n 3 Arkansas                423919      760641\n 4 California            11109642     6006031\n 5 Colorado               1804393     1364627\n 6 Connecticut            1080677      715315\n 7 Delaware                296274      200601\n 8 District of Columbia    317324       18595\n 9 Florida                5297131     5668600\n10 Georgia                2473661     2461869\n# ℹ 40 more rows\n\n\n\n# What states did the Democratic candidate win in 2020?\nelections_small |&gt;\n  mutate(\n    repub_votes = round(total_votes_20 * repub_pct_20/100),\n    dem_votes = round(total_votes_20 * dem_pct_20/100)\n  ) |&gt;\n  group_by(state_name) |&gt;\n  summarise(total_dem = sum(dem_votes), total_repub = sum(repub_votes)) |&gt;\n  mutate(dem_win_20 = total_dem &gt; total_repub)\n\n# A tibble: 50 × 4\n   state_name           total_dem total_repub dem_win_20\n   &lt;chr&gt;                    &lt;dbl&gt;       &lt;dbl&gt; &lt;lgl&gt;     \n 1 Alabama                 849664     1441155 FALSE     \n 2 Arizona                1672127     1661671 TRUE      \n 3 Arkansas                423919      760641 FALSE     \n 4 California            11109642     6006031 TRUE      \n 5 Colorado               1804393     1364627 TRUE      \n 6 Connecticut            1080677      715315 TRUE      \n 7 Delaware                296274      200601 TRUE      \n 8 District of Columbia    317324       18595 TRUE      \n 9 Florida                5297131     5668600 FALSE     \n10 Georgia                2473661     2461869 TRUE      \n# ℹ 40 more rows",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Wrangling</span>"
    ]
  },
  {
    "objectID": "ica/ica-date.html",
    "href": "ica/ica-date.html",
    "title": "Dates",
    "section": "",
    "text": "Exercises\n# Load dataset\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\npenguins &lt;- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-07-28/penguins.csv')\n\nRows: 344 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): species, island, sex\ndbl (5): bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g, year\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# Check it out\nhead(penguins)\n\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;chr&gt;   &lt;chr&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;       &lt;dbl&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 2 more variables: sex &lt;chr&gt;, year &lt;dbl&gt;",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Dates</span>"
    ]
  },
  {
    "objectID": "ica/ica-date.html#exercise-1-more-filtering",
    "href": "ica/ica-date.html#exercise-1-more-filtering",
    "title": "Dates",
    "section": "Exercise 1: More Filtering",
    "text": "Exercise 1: More Filtering\nPart a\n\n# Create a dataset with just Adelie and Chinstrap using %in%\n# Pipe this into `count(species)` to confirm that you only have these 2 species\npenguins |&gt;\n  filter(species %in% c(\"Adelie\", \"Chinstrap\")) |&gt;\n  count(species)\n\n# A tibble: 2 × 2\n  species       n\n  &lt;chr&gt;     &lt;int&gt;\n1 Adelie      152\n2 Chinstrap    68\n\n\n\n# Create a dataset with just Adelie and Chinstrap using !=\n# Pipe this into `count(species)` to confirm that you only have these 2 species\npenguins |&gt;\n  filter(species != \"Gentoo\") |&gt;\n  count(species)\n\n# A tibble: 2 × 2\n  species       n\n  &lt;chr&gt;     &lt;int&gt;\n1 Adelie      152\n2 Chinstrap    68\n\n\nPart b\nExample 1\n\n# NOTE the use of is.na()\npenguins |&gt; \n  summarize(sum(is.na(body_mass_g)))\n\n# A tibble: 1 × 1\n  `sum(is.na(body_mass_g))`\n                      &lt;int&gt;\n1                         2\n\n\n\n# NOTE the use of is.na()\npenguins_w_body_mass &lt;- penguins |&gt; \n  filter(!is.na(body_mass_g))\n\n# Compare the number of penguins in this vs the original data\nnrow(penguins_w_body_mass)\n\n[1] 342\n\n\n\nnrow(penguins)\n\n[1] 344\n\n\n\npenguins_w_body_mass |&gt; \n  summarize(sum(is.na(sex)))\n\n# A tibble: 1 × 1\n  `sum(is.na(sex))`\n              &lt;int&gt;\n1                 9\n\n\nExample 2\n\npenguins_complete &lt;- penguins |&gt; \n  na.omit()\n\n\nnrow(penguins_complete)\n\n[1] 333\n\n\n\nnrow(penguins)\n\n[1] 344",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Dates</span>"
    ]
  },
  {
    "objectID": "ica/ica-date.html#exercise-2",
    "href": "ica/ica-date.html#exercise-2",
    "title": "Dates",
    "section": "Exercise 2",
    "text": "Exercise 2\n\n# First: recall the variable names\nnames(penguins)\n\n[1] \"species\"           \"island\"            \"bill_length_mm\"   \n[4] \"bill_depth_mm\"     \"flipper_length_mm\" \"body_mass_g\"      \n[7] \"sex\"               \"year\"             \n\n\n\n# Use a shortcut to keep everything but the year and island variables\npenguins |&gt;\n  select(-island, -year)\n\n# A tibble: 344 × 6\n   species bill_length_mm bill_depth_mm flipper_length_mm body_mass_g sex   \n   &lt;chr&gt;            &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;       &lt;dbl&gt; &lt;chr&gt; \n 1 Adelie            39.1          18.7               181        3750 male  \n 2 Adelie            39.5          17.4               186        3800 female\n 3 Adelie            40.3          18                 195        3250 female\n 4 Adelie            NA            NA                  NA          NA &lt;NA&gt;  \n 5 Adelie            36.7          19.3               193        3450 female\n 6 Adelie            39.3          20.6               190        3650 male  \n 7 Adelie            38.9          17.8               181        3625 female\n 8 Adelie            39.2          19.6               195        4675 male  \n 9 Adelie            34.1          18.1               193        3475 &lt;NA&gt;  \n10 Adelie            42            20.2               190        4250 &lt;NA&gt;  \n# ℹ 334 more rows\n\n\n\n# Use a shortcut to keep only species and the penguin characteristics measured in mm\npenguins |&gt;\n  select(species, ends_with(\"mm\"))\n\n# A tibble: 344 × 4\n   species bill_length_mm bill_depth_mm flipper_length_mm\n   &lt;chr&gt;            &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;\n 1 Adelie            39.1          18.7               181\n 2 Adelie            39.5          17.4               186\n 3 Adelie            40.3          18                 195\n 4 Adelie            NA            NA                  NA\n 5 Adelie            36.7          19.3               193\n 6 Adelie            39.3          20.6               190\n 7 Adelie            38.9          17.8               181\n 8 Adelie            39.2          19.6               195\n 9 Adelie            34.1          18.1               193\n10 Adelie            42            20.2               190\n# ℹ 334 more rows\n\n\n\n# Use a shortcut to keep only species and bill-related measurements\npenguins |&gt;\n  select(species, starts_with(\"bill\"))\n\n# A tibble: 344 × 3\n   species bill_length_mm bill_depth_mm\n   &lt;chr&gt;            &lt;dbl&gt;         &lt;dbl&gt;\n 1 Adelie            39.1          18.7\n 2 Adelie            39.5          17.4\n 3 Adelie            40.3          18  \n 4 Adelie            NA            NA  \n 5 Adelie            36.7          19.3\n 6 Adelie            39.3          20.6\n 7 Adelie            38.9          17.8\n 8 Adelie            39.2          19.6\n 9 Adelie            34.1          18.1\n10 Adelie            42            20.2\n# ℹ 334 more rows\n\n\n\n# Use a shortcut to keep only species and the length-related characteristics\npenguins |&gt;\n  select(species, contains(\"length\"))\n\n# A tibble: 344 × 3\n   species bill_length_mm flipper_length_mm\n   &lt;chr&gt;            &lt;dbl&gt;             &lt;dbl&gt;\n 1 Adelie            39.1               181\n 2 Adelie            39.5               186\n 3 Adelie            40.3               195\n 4 Adelie            NA                  NA\n 5 Adelie            36.7               193\n 6 Adelie            39.3               190\n 7 Adelie            38.9               181\n 8 Adelie            39.2               195\n 9 Adelie            34.1               193\n10 Adelie            42                 190\n# ℹ 334 more rows",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Dates</span>"
    ]
  },
  {
    "objectID": "ica/ica-date.html#exercise-3-arranging-counting-grouping-by-multiple-variables",
    "href": "ica/ica-date.html#exercise-3-arranging-counting-grouping-by-multiple-variables",
    "title": "Dates",
    "section": "Exercise 3: Arranging, Counting, & Grouping by Multiple Variables",
    "text": "Exercise 3: Arranging, Counting, & Grouping by Multiple Variables\n\n# Change this code to sort the penguins by species, and then island name\n# NOTE: The first row should be an Adelie penguin living on Biscoe island\npenguins |&gt; \n  arrange(species) |&gt;\n  arrange(island)\n\n# A tibble: 344 × 8\n   species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;chr&gt;   &lt;chr&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;       &lt;dbl&gt;\n 1 Adelie  Biscoe           37.8          18.3               174        3400\n 2 Adelie  Biscoe           37.7          18.7               180        3600\n 3 Adelie  Biscoe           35.9          19.2               189        3800\n 4 Adelie  Biscoe           38.2          18.1               185        3950\n 5 Adelie  Biscoe           38.8          17.2               180        3800\n 6 Adelie  Biscoe           35.3          18.9               187        3800\n 7 Adelie  Biscoe           40.6          18.6               183        3550\n 8 Adelie  Biscoe           40.5          17.9               187        3200\n 9 Adelie  Biscoe           37.9          18.6               172        3150\n10 Adelie  Biscoe           40.5          18.9               180        3950\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;chr&gt;, year &lt;dbl&gt;\n\n\n\n# Change this code to count the number of male/female penguins observed for each species\npenguins |&gt;\n  group_by(sex) |&gt;\n  count(species)\n\n# A tibble: 8 × 3\n# Groups:   sex [3]\n  sex    species       n\n  &lt;chr&gt;  &lt;chr&gt;     &lt;int&gt;\n1 female Adelie       73\n2 female Chinstrap    34\n3 female Gentoo       58\n4 male   Adelie       73\n5 male   Chinstrap    34\n6 male   Gentoo       61\n7 &lt;NA&gt;   Adelie        6\n8 &lt;NA&gt;   Gentoo        5\n\n\n\n# Change this code to calculate the average body mass by species and sex\npenguins |&gt; \n  group_by(species, sex) |&gt; \n  summarize(mean = mean(body_mass_g, na.rm = TRUE))\n\n`summarise()` has grouped output by 'species'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 8 × 3\n# Groups:   species [3]\n  species   sex     mean\n  &lt;chr&gt;     &lt;chr&gt;  &lt;dbl&gt;\n1 Adelie    female 3369.\n2 Adelie    male   4043.\n3 Adelie    &lt;NA&gt;   3540 \n4 Chinstrap female 3527.\n5 Chinstrap male   3939.\n6 Gentoo    female 4680.\n7 Gentoo    male   5485.\n8 Gentoo    &lt;NA&gt;   4588.",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Dates</span>"
    ]
  },
  {
    "objectID": "ica/ica-date.html#exercise-4-dates",
    "href": "ica/ica-date.html#exercise-4-dates",
    "title": "Dates",
    "section": "Exercise 4: Dates",
    "text": "Exercise 4: Dates\n\n# Get today's date\nas.Date(today())\n\n[1] \"2025-03-29\"\n\n\n\n# Let's store this as \"today\" so we can work with it below\ntoday &lt;- as.Date(today())\n\n# Check out the class of this object\nclass(today)\n\n[1] \"Date\"\n\n\n\nyear(today)\n\n[1] 2025\n\n\n\n# What do these lines produce / what's their difference?\nmonth(today)\n\n[1] 3\n\n\n\nmonth(today, label = TRUE)\n\n[1] Mar\n12 Levels: Jan &lt; Feb &lt; Mar &lt; Apr &lt; May &lt; Jun &lt; Jul &lt; Aug &lt; Sep &lt; ... &lt; Dec\n\n\n\n# What does this number mean?\nweek(today)\n\n[1] 13\n\n\n\n# What do these lines produce / what's their difference?\nmday(today)\n\n[1] 29\n\n\n\nyday(today)  # This is often called the \"Julian day\"\n\n[1] 88\n\n\n\n# What do these lines produce / what's their difference?\nwday(today)\n\n[1] 7\n\n\n\nwday(today, label = TRUE)\n\n[1] Sat\nLevels: Sun &lt; Mon &lt; Tue &lt; Wed &lt; Thu &lt; Fri &lt; Sat\n\n\n\n# What do the results of these 2 lines tell us?\ntoday &gt;= ymd(\"2024-02-14\")\n\n[1] TRUE\n\n\n\ntoday &lt; ymd(\"2024-02-14\")\n\n[1] FALSE",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Dates</span>"
    ]
  },
  {
    "objectID": "ica/ica-date.html#exercise-5-warming-up",
    "href": "ica/ica-date.html#exercise-5-warming-up",
    "title": "Dates",
    "section": "Exercise 5: Warming up",
    "text": "Exercise 5: Warming up\n\n# How many days of data do we have for each state?\nBirthdays |&gt;\n  group_by(state) |&gt;\n  summarise(sum(day))\n\n# A tibble: 51 × 2\n   state `sum(day)`\n   &lt;chr&gt;      &lt;int&gt;\n 1 AK        114936\n 2 AL        115119\n 3 AR        115058\n 4 AZ        115057\n 5 CA        115518\n 6 CO        114905\n 7 CT        115117\n 8 DC        115087\n 9 DE        114967\n10 FL        114967\n# ℹ 41 more rows\n\n# How many total births were there in this time period?\nBirthdays |&gt;\n  summarise(sum(births))\n\n  sum(births)\n1    70486538\n\n# How many total births were there per state in this time period, sorted from low to high?\nBirthdays |&gt;\n  group_by(state) |&gt;\n  summarise(sum_births = sum(births)) |&gt;\n  arrange(sum_births)\n\n# A tibble: 51 × 2\n   state sum_births\n   &lt;chr&gt;      &lt;int&gt;\n 1 VT        147886\n 2 WY        154019\n 3 AK        185385\n 4 DE        188705\n 5 SD        235734\n 6 ND        238696\n 7 NV        241470\n 8 MT        253884\n 9 NH        264984\n10 RI        265038\n# ℹ 41 more rows",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Dates</span>"
    ]
  },
  {
    "objectID": "ica/ica-date.html#exercise-6-homework-reprise",
    "href": "ica/ica-date.html#exercise-6-homework-reprise",
    "title": "Dates",
    "section": "Exercise 6: Homework Reprise",
    "text": "Exercise 6: Homework Reprise\n\n# Create a new dataset named daily_births that includes the total number of births per day (across all states) and the corresponding day of the week.\ndaily_births &lt;- Birthdays |&gt;\n  group_by(day) |&gt;\n  summarise(births_per_day = sum(births))\nhead(daily_births)\n\n# A tibble: 6 × 2\n    day births_per_day\n  &lt;int&gt;          &lt;int&gt;\n1     1        2286854\n2     2        2303168\n3     3        2309087\n4     4        2286588\n5     5        2296951\n6     6        2308073\n\n\n\n# Construct a plot of births over time, indicating the day of week.\nggplot(daily_births, aes(x = day, y = births_per_day)) +\n  geom_smooth()\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Dates</span>"
    ]
  },
  {
    "objectID": "ica/ica-date.html#exercise-7-wrangle-and-plot",
    "href": "ica/ica-date.html#exercise-7-wrangle-and-plot",
    "title": "Dates",
    "section": "Exercise 7: Wrangle and Plot",
    "text": "Exercise 7: Wrangle and Plot\nPart a\n\n# Calculate the total number of births in each month and year, eg, Jan 1969, Feb 1969, …. Label month by names not numbers, eg, Jan not 1. Then, plot the births by month and comment on what you learn.\n\nPart b\n\n# In 1988, calculate the total number of births per week in each state. Get rid of week “53”, which isn’t a complete week! Then, make a line plot of births by week for each state and comment on what you learn. For example, do you notice any seasonal trends? Are these the same in every state? Any outliers?\n\nPart c\n\n# Repeat the above for just Minnesota (MN) and Louisiana (LA). MN has one of the coldest climates and LA has one of the warmest. How do their seasonal trends compare? Do you think these trends are similar in other colder and warmer states? Try it!",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Dates</span>"
    ]
  },
  {
    "objectID": "ica/ica-reshaping.html",
    "href": "ica/ica-reshaping.html",
    "title": "Reshaping",
    "section": "",
    "text": "Exercise 1: What’s the problem?\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nsleep_wide &lt;- read.csv(\"https://mac-stat.github.io/data/sleep_wide.csv\")\n\nhead(sleep_wide)\n\n  Subject  day_0  day_1  day_2  day_3  day_4  day_5  day_6  day_7  day_8  day_9\n1     308 249.56 258.70 250.80 321.44 356.85 414.69 382.20 290.15 430.59 466.35\n2     309 222.73 205.27 202.98 204.71 207.72 215.96 213.63 217.73 224.30 237.31\n3     310 199.05 194.33 234.32 232.84 229.31 220.46 235.42 255.75 261.01 247.52\n4     330 321.54 300.40 283.86 285.13 285.80 297.59 280.24 318.26 305.35 354.05\n5     331 287.61 285.00 301.82 320.12 316.28 293.32 290.08 334.82 293.75 371.58\n6     332 234.86 242.81 272.96 309.77 317.46 310.00 454.16 346.83 330.30 253.86\n\nnrow(sleep_wide)\n\n[1] 18",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Reshaping</span>"
    ]
  },
  {
    "objectID": "ica/ica-reshaping.html#exercise-2-pivot-longer",
    "href": "ica/ica-reshaping.html#exercise-2-pivot-longer",
    "title": "Reshaping",
    "section": "Exercise 2: Pivot longer",
    "text": "Exercise 2: Pivot longer\n\n# For cols, try 2 appproaches: using - and starts_with\nsleep_wide |&gt;\n  pivot_longer(cols = 2:11, names_to = \"day\", values_to = \"rxn_time\") |&gt;\n  head()\n\n# A tibble: 6 × 3\n  Subject day   rxn_time\n    &lt;int&gt; &lt;chr&gt;    &lt;dbl&gt;\n1     308 day_0     250.\n2     308 day_1     259.\n3     308 day_2     251.\n4     308 day_3     321.\n5     308 day_4     357.\n6     308 day_5     415.\n\n\n\nsleep_long &lt;- sleep_wide |&gt;\n  pivot_longer(cols = -Subject,\n               names_to = \"day\",\n               names_prefix = \"day_\",\n               values_to = \"reaction_time\")\n\nhead(sleep_long)\n\n# A tibble: 6 × 3\n  Subject day   reaction_time\n    &lt;int&gt; &lt;chr&gt;         &lt;dbl&gt;\n1     308 0              250.\n2     308 1              259.\n3     308 2              251.\n4     308 3              321.\n5     308 4              357.\n6     308 5              415.\n\n\nPart b\n\n# construct a line plot of reaction time vs day for each subject\nggplot(sleep_long, aes(x = day, y = reaction_time, colour = Subject)) +\n  geom_point()\n\n\n\n\n\n\n# This will look goofy no matter what you do (variable classes)",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Reshaping</span>"
    ]
  },
  {
    "objectID": "ica/ica-reshaping.html#exercise-3-changing-variable-classes-plotting",
    "href": "ica/ica-reshaping.html#exercise-3-changing-variable-classes-plotting",
    "title": "Reshaping",
    "section": "Exercise 3: Changing variable classes & plotting",
    "text": "Exercise 3: Changing variable classes & plotting\n\n# changing classes of subject and day\nsleep_long &lt;- sleep_wide |&gt;\n  pivot_longer(cols = -Subject,\n               names_to = \"day\",\n               names_prefix = \"day_\",\n               values_to = \"reaction_time\") |&gt; \n  mutate(Subject = as.factor(Subject), day = as.numeric(day))\n\n# Check it out\n# Same data, different class\nhead(sleep_long)\n\n# A tibble: 6 × 3\n  Subject   day reaction_time\n  &lt;fct&gt;   &lt;dbl&gt;         &lt;dbl&gt;\n1 308         0          250.\n2 308         1          259.\n3 308         2          251.\n4 308         3          321.\n5 308         4          357.\n6 308         5          415.\n\n\nPlots\n\n# Make a line plot of reaction time by day for each subject\n# Put these all on the same frame\nggplot(sleep_long, aes(x = day, y = reaction_time, colour = Subject)) +\n  geom_line() +\n  theme_light()\n\n\n\n\n\n\n\n\n# Make a line plot of reaction time by day for each subject\n# Put these all on separate frames (one per subject)\nggplot(sleep_long, aes(x = day, y = reaction_time)) +\n  geom_line() +\n  facet_wrap(~Subject)",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Reshaping</span>"
    ]
  },
  {
    "objectID": "ica/ica-reshaping.html#exercise-4-pivot-wider",
    "href": "ica/ica-reshaping.html#exercise-4-pivot-wider",
    "title": "Reshaping",
    "section": "Exercise 4: Pivot wider",
    "text": "Exercise 4: Pivot wider\nPart a\n\n# Adjust the code below. What don’t you like about the column labels?\nsleep_long |&gt;\n  pivot_wider(names_from = day, values_from = reaction_time) |&gt;\n  head()\n\n# A tibble: 6 × 11\n  Subject   `0`   `1`   `2`   `3`   `4`   `5`   `6`   `7`   `8`   `9`\n  &lt;fct&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 308      250.  259.  251.  321.  357.  415.  382.  290.  431.  466.\n2 309      223.  205.  203.  205.  208.  216.  214.  218.  224.  237.\n3 310      199.  194.  234.  233.  229.  220.  235.  256.  261.  248.\n4 330      322.  300.  284.  285.  286.  298.  280.  318.  305.  354.\n5 331      288.  285   302.  320.  316.  293.  290.  335.  294.  372.\n6 332      235.  243.  273.  310.  317.  310   454.  347.  330.  254.\n\n\nPart b\n\n# Using your intuition, adjust your code from part a to name the reaction time columns “day_0”, “day_1”, etc.\nsleep_long |&gt;\n  pivot_wider(names_from = day, values_from = reaction_time, names_prefix = \"day_\") |&gt;\n  head()\n\n# A tibble: 6 × 11\n  Subject day_0 day_1 day_2 day_3 day_4 day_5 day_6 day_7 day_8 day_9\n  &lt;fct&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 308      250.  259.  251.  321.  357.  415.  382.  290.  431.  466.\n2 309      223.  205.  203.  205.  208.  216.  214.  218.  224.  237.\n3 310      199.  194.  234.  233.  229.  220.  235.  256.  261.  248.\n4 330      322.  300.  284.  285.  286.  298.  280.  318.  305.  354.\n5 331      288.  285   302.  320.  316.  293.  290.  335.  294.  372.\n6 332      235.  243.  273.  310.  317.  310   454.  347.  330.  254.",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Reshaping</span>"
    ]
  },
  {
    "objectID": "ica/ica-reshaping.html#exercise-5-practice-with-billboard-charts",
    "href": "ica/ica-reshaping.html#exercise-5-practice-with-billboard-charts",
    "title": "Reshaping",
    "section": "Exercise 5: Practice with Billboard charts",
    "text": "Exercise 5: Practice with Billboard charts\n\n# Load data\nlibrary(tidyr)\ndata(\"billboard\")\n\n# Check it out\nhead(billboard)\n\n# A tibble: 6 × 79\n  artist      track date.entered   wk1   wk2   wk3   wk4   wk5   wk6   wk7   wk8\n  &lt;chr&gt;       &lt;chr&gt; &lt;date&gt;       &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 2 Pac       Baby… 2000-02-26      87    82    72    77    87    94    99    NA\n2 2Ge+her     The … 2000-09-02      91    87    92    NA    NA    NA    NA    NA\n3 3 Doors Do… Kryp… 2000-04-08      81    70    68    67    66    57    54    53\n4 3 Doors Do… Loser 2000-10-21      76    76    72    69    67    65    55    59\n5 504 Boyz    Wobb… 2000-04-15      57    34    25    17    17    31    36    49\n6 98^0        Give… 2000-08-19      51    39    34    26    26    19     2     2\n# ℹ 68 more variables: wk9 &lt;dbl&gt;, wk10 &lt;dbl&gt;, wk11 &lt;dbl&gt;, wk12 &lt;dbl&gt;,\n#   wk13 &lt;dbl&gt;, wk14 &lt;dbl&gt;, wk15 &lt;dbl&gt;, wk16 &lt;dbl&gt;, wk17 &lt;dbl&gt;, wk18 &lt;dbl&gt;,\n#   wk19 &lt;dbl&gt;, wk20 &lt;dbl&gt;, wk21 &lt;dbl&gt;, wk22 &lt;dbl&gt;, wk23 &lt;dbl&gt;, wk24 &lt;dbl&gt;,\n#   wk25 &lt;dbl&gt;, wk26 &lt;dbl&gt;, wk27 &lt;dbl&gt;, wk28 &lt;dbl&gt;, wk29 &lt;dbl&gt;, wk30 &lt;dbl&gt;,\n#   wk31 &lt;dbl&gt;, wk32 &lt;dbl&gt;, wk33 &lt;dbl&gt;, wk34 &lt;dbl&gt;, wk35 &lt;dbl&gt;, wk36 &lt;dbl&gt;,\n#   wk37 &lt;dbl&gt;, wk38 &lt;dbl&gt;, wk39 &lt;dbl&gt;, wk40 &lt;dbl&gt;, wk41 &lt;dbl&gt;, wk42 &lt;dbl&gt;,\n#   wk43 &lt;dbl&gt;, wk44 &lt;dbl&gt;, wk45 &lt;dbl&gt;, wk46 &lt;dbl&gt;, wk47 &lt;dbl&gt;, wk48 &lt;dbl&gt;, …\n\n\nPart a\n\n# Construct and summarize a plot of how a song’s Billboard ranking its 2nd week on the chart (y-axis) is related to its ranking the 1st week on the charts (x-axis). \n# Add a reference line geom_abline(intercept = 0, slope = 1)\nggplot(billboard, aes(x = wk1, y = wk2)) +\n  geom_point() +\n  geom_abline(intercept = 0, slope = 1) +\n  labs(x = \"Week 1\", y = \"Week 2\") +\n  theme_light()\n\nWarning: Removed 5 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\nPart b\n\n#Use your wrangling tools to identify which songs are those above the line in Part a, i.e. with rankgings that went up from week 1 to week 2.\n\nbillboard |&gt;\n  filter(wk2 &gt; wk1) |&gt;\n  head()\n\n# A tibble: 6 × 79\n  artist      track date.entered   wk1   wk2   wk3   wk4   wk5   wk6   wk7   wk8\n  &lt;chr&gt;       &lt;chr&gt; &lt;date&gt;       &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Carey, Mar… Cryb… 2000-06-24      28    34    48    62    77    90    95    NA\n2 Clark, Ter… A Li… 2000-12-16      75    82    88    96    99    99    NA    NA\n3 Diffie, Joe The … 2000-01-01      98   100   100    90    93    94    NA    NA\n4 Hart, Beth  L.A.… 1999-11-27      99   100    98    99    99    99    98    90\n5 Jay-Z       Hey … 2000-08-12      98   100    98    94    83    83    80    78\n6 Lil' Zane   Call… 2000-07-29      83    89    57    40    34    21    33    46\n# ℹ 68 more variables: wk9 &lt;dbl&gt;, wk10 &lt;dbl&gt;, wk11 &lt;dbl&gt;, wk12 &lt;dbl&gt;,\n#   wk13 &lt;dbl&gt;, wk14 &lt;dbl&gt;, wk15 &lt;dbl&gt;, wk16 &lt;dbl&gt;, wk17 &lt;dbl&gt;, wk18 &lt;dbl&gt;,\n#   wk19 &lt;dbl&gt;, wk20 &lt;dbl&gt;, wk21 &lt;dbl&gt;, wk22 &lt;dbl&gt;, wk23 &lt;dbl&gt;, wk24 &lt;dbl&gt;,\n#   wk25 &lt;dbl&gt;, wk26 &lt;dbl&gt;, wk27 &lt;dbl&gt;, wk28 &lt;dbl&gt;, wk29 &lt;dbl&gt;, wk30 &lt;dbl&gt;,\n#   wk31 &lt;dbl&gt;, wk32 &lt;dbl&gt;, wk33 &lt;dbl&gt;, wk34 &lt;dbl&gt;, wk35 &lt;dbl&gt;, wk36 &lt;dbl&gt;,\n#   wk37 &lt;dbl&gt;, wk38 &lt;dbl&gt;, wk39 &lt;dbl&gt;, wk40 &lt;dbl&gt;, wk41 &lt;dbl&gt;, wk42 &lt;dbl&gt;,\n#   wk43 &lt;dbl&gt;, wk44 &lt;dbl&gt;, wk45 &lt;dbl&gt;, wk46 &lt;dbl&gt;, wk47 &lt;dbl&gt;, wk48 &lt;dbl&gt;, …\n\n\nPart c\nDefine a new dataset, nov_1999, which:\n\nonly includes data on songs that entered the Billboard charts on November 6, 1999\nkeeps all variables except track and date.entered. HINT: How can you avoid writing out all the variable names you want to keep?\n\n\n# Define nov_1999\nnov_1999 &lt;- billboard |&gt;\n  filter(date.entered == \"1999-11-06\") |&gt;\n  select(starts_with(\"wk\"), artist) |&gt;\n  head()\n\n# Confirm that nov_1999 has 2 rows (songs) and 77 columns\nnrow(nov_1999)\n\n[1] 2\n\n\nPart d\n\n# Create and discuss a visualization of the rankings (y-axis) over time (x-axis) for the 2 songs in nov_1999.\nnov_1999 |&gt;\n  pivot_longer(cols = -artist,\n               names_to = \"week\",\n               names_prefix = \"wk\",\n               values_to = \"rank\") |&gt;\n  mutate(week = as.numeric(week)) |&gt;\n  ggplot(aes(x = week, y = rank, colour = artist)) +\n    geom_line() +\n    theme_light()\n\nWarning: Removed 79 rows containing missing values or values outside the scale range\n(`geom_line()`).",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Reshaping</span>"
    ]
  },
  {
    "objectID": "ica/ica-joining.html",
    "href": "ica/ica-joining.html",
    "title": "Joining",
    "section": "",
    "text": "Exercise 1: Where are my keys?",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Joining</span>"
    ]
  },
  {
    "objectID": "ica/ica-joining.html#exercise-1-where-are-my-keys",
    "href": "ica/ica-joining.html#exercise-1-where-are-my-keys",
    "title": "Joining",
    "section": "",
    "text": "Part a\n\n# Define two new datasets, with different students and courses:\nstudents_2 &lt;- data.frame(\n  student = c(\"D\", \"E\", \"F\"),\n  class = c(\"COMP 101\", \"BIOL 101\", \"POLI 101\")\n)\n\n# Check it out\nstudents_2\n\n  student    class\n1       D COMP 101\n2       E BIOL 101\n3       F POLI 101\n\n\n\nenrollments_2 &lt;- data.frame(\n  course = c(\"ART 101\", \"BIOL 101\", \"COMP 101\"),\n  enrollment = c(18, 20, 19)\n)\n\n# Check it out\nenrollments_2\n\n    course enrollment\n1  ART 101         18\n2 BIOL 101         20\n3 COMP 101         19\n\n\nPart b\nThe problem is that course name, the key or variable that links these two datasets, is labeled differently: class in the students_2 data and course in the enrollments_2 data. Thus we have to specify these keys in our code:\n\nstudents_2 |&gt; \n  left_join(enrollments_2, join_by(class == course))\n\n  student    class enrollment\n1       D COMP 101         19\n2       E BIOL 101         20\n3       F POLI 101         NA\n\n\nPart c\n\n# Define another set of fake data which adds grade information\n# Add student grades in each course\nstudents_3 &lt;- data.frame(\n  student = c(\"Y\", \"Y\", \"Z\", \"Z\"),\n  class = c(\"COMP 101\", \"BIOL 101\", \"POLI 101\", \"COMP 101\"),\n  grade = c(\"B\", \"S\", \"C\", \"A\")\n)\n\n# Check it out\nstudents_3\n\n  student    class grade\n1       Y COMP 101     B\n2       Y BIOL 101     S\n3       Z POLI 101     C\n4       Z COMP 101     A\n\n\n\n# Add average grades in each course\nenrollments_3 &lt;- data.frame(\n  class = c(\"ART 101\", \"BIOL 101\",\"COMP 101\"),\n  grade = c(\"B\", \"A\", \"A-\"),\n  enrollment = c(20, 18, 19)\n)\n\n# Check it out\nenrollments_3\n\n     class grade enrollment\n1  ART 101     B         20\n2 BIOL 101     A         18\n3 COMP 101    A-         19\n\n\n\n# Try doing a left_join() to link the students’ classes to their enrollment info. Did this work? Try and figure out the culprit by examining the output.\nstudents_3 |&gt; \n  left_join(enrollments_3)\n\nJoining with `by = join_by(class, grade)`\n\n\n  student    class grade enrollment\n1       Y COMP 101     B         NA\n2       Y BIOL 101     S         NA\n3       Z POLI 101     C         NA\n4       Z COMP 101     A         NA\n\n\nPart d\nThe issue here is that our datasets have 2 column names in common: class and grade. BUT grade is measuring 2 different things here: individual student grades in students_3 and average student grades in enrollments_3. Thus it doesn’t make sense to try to join the datasets with respect to this variable. We can again solve this by specifying that we want to join the datasets using the class variable as a key.\n\nstudents_3 |&gt; \n  left_join(enrollments_3, join_by(class == class))\n\n  student    class grade.x grade.y enrollment\n1       Y COMP 101       B      A-         19\n2       Y BIOL 101       S       A         18\n3       Z POLI 101       C    &lt;NA&gt;         NA\n4       Z COMP 101       A      A-         19",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Joining</span>"
    ]
  },
  {
    "objectID": "ica/ica-joining.html#exercise-2-more-small-practice",
    "href": "ica/ica-joining.html#exercise-2-more-small-practice",
    "title": "Joining",
    "section": "Exercise 2: More small practice",
    "text": "Exercise 2: More small practice\nDefine the following fake data on voters (people who have voted) and contact info for voting age adults (people who could vote):\n\n# People who have voted\nvoters &lt;- data.frame(\n  id = c(\"A\", \"D\", \"E\", \"F\", \"G\"),\n  times_voted = c(2, 4, 17, 6, 20)\n)\n\nvoters\n\n  id times_voted\n1  A           2\n2  D           4\n3  E          17\n4  F           6\n5  G          20\n\n\n\n# Contact info for voting age adults\ncontact &lt;- data.frame(\n  name = c(\"A\", \"B\", \"C\", \"D\"),\n  address = c(\"summit\", \"grand\", \"snelling\", \"fairview\"),\n  age = c(24, 89, 43, 38)\n)\n\ncontact\n\n  name  address age\n1    A   summit  24\n2    B    grand  89\n3    C snelling  43\n4    D fairview  38\n\n\n\n# Use the appropriate join for each prompt below. In each case, think before you type:\n# What dataset goes on the left?\n# What do you want the resulting dataset to look like? How many rows and columns will it have?\n\n# 1. We want contact info for people who HAVEN'T voted\ncontact |&gt;\n  anti_join(voters, join_by(name == id)) |&gt;\n  head()\n\n  name  address age\n1    B    grand  89\n2    C snelling  43\n\n# 2. We want contact info for people who HAVE voted\ncontact |&gt;\n  semi_join(voters, join_by(name == id)) |&gt;\n  head()\n\n  name  address age\n1    A   summit  24\n2    D fairview  38\n\n# 3. We want any data available on each person\nvoters |&gt;\n  full_join(contact, join_by(id == name)) |&gt;\n  head()\n\n  id times_voted  address age\n1  A           2   summit  24\n2  D           4 fairview  38\n3  E          17     &lt;NA&gt;  NA\n4  F           6     &lt;NA&gt;  NA\n5  G          20     &lt;NA&gt;  NA\n6  B          NA    grand  89\n\n# 4. When possible, we want to add contact info to the voting roster\nvoters |&gt;\n  left_join(contact, join_by(id == name)) |&gt;\n  head()\n\n  id times_voted  address age\n1  A           2   summit  24\n2  D           4 fairview  38\n3  E          17     &lt;NA&gt;  NA\n4  F           6     &lt;NA&gt;  NA\n5  G          20     &lt;NA&gt;  NA",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Joining</span>"
    ]
  },
  {
    "objectID": "ica/ica-joining.html#exercise-3-bigger-datasets",
    "href": "ica/ica-joining.html#exercise-3-bigger-datasets",
    "title": "Joining",
    "section": "Exercise 3: Bigger datasets",
    "text": "Exercise 3: Bigger datasets\n\n# Get rid of some duplicate rows!\ngrades &lt;- read.csv(\"https://mac-stat.github.io/data/grades.csv\") |&gt; \n  distinct(sid, sessionID, .keep_all = TRUE)\nhead(grades)\n\n     sid grade   sessionID\n1 S31185    D+ session1784\n2 S31185    B+ session1785\n3 S31185    A- session1791\n4 S31185    B+ session1792\n5 S31185    B- session1794\n6 S31185    C+ session1795\n\n\n\ncourses &lt;- read.csv(\"https://mac-stat.github.io/data/courses.csv\")\n\nhead(courses)\n\n    sessionID dept level    sem enroll     iid\n1 session1784    M   100 FA1991     22 inst265\n2 session1785    k   100 FA1991     52 inst458\n3 session1791    J   100 FA1993     22 inst223\n4 session1792    J   300 FA1993     20 inst235\n5 session1794    J   200 FA1993     22 inst234\n6 session1795    J   200 SP1994     26 inst230\n\n\n\n# Use R code to take a quick glance at the data\n# How many observations (rows) and variables (columns) are there in the grades data?\nnrow(grades)\n\n[1] 5844\n\nncol(grades)\n\n[1] 3\n\n# How many observations (rows) and variables (columns) are there in the courses data?\nnrow(courses)\n\n[1] 1718\n\nncol(courses)\n\n[1] 6",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Joining</span>"
    ]
  },
  {
    "objectID": "ica/ica-joining.html#exercise-4-class-size",
    "href": "ica/ica-joining.html#exercise-4-class-size",
    "title": "Joining",
    "section": "Exercise 4: Class size",
    "text": "Exercise 4: Class size\nPart a\n\n# Before digging in, note that some courses are listed twice in the courses data:\ncourses |&gt; \n  count(sessionID) |&gt; \n  filter(n &gt; 1)\n\n     sessionID n\n1  session2047 2\n2  session2067 2\n3  session2448 2\n4  session2509 2\n5  session2541 2\n6  session2824 2\n7  session2826 2\n8  session2862 2\n9  session2897 2\n10 session3046 2\n11 session3057 2\n12 session3123 2\n13 session3243 2\n14 session3257 2\n15 session3387 2\n16 session3400 2\n17 session3414 2\n18 session3430 2\n19 session3489 2\n20 session3524 2\n21 session3629 2\n22 session3643 2\n23 session3821 2\n\n\n\n# If we pick out just 1 of these, we learn that some courses are cross-listed in multiple departments:\ncourses |&gt; \n  filter(sessionID == \"session2047\")\n\n    sessionID dept level    sem enroll     iid\n1 session2047    g   100 FA2001     12 inst436\n2 session2047    m   100 FA2001     28 inst436\n\n\n\n# Obtain the total enrollments in each sessionID, combining any cross-listed sections\ncourses_combined &lt;- courses |&gt;\n  group_by(sessionID) |&gt;\n  summarise(enroll = sum(enroll))\n\n# Check that this has 1695 rows and 2 columns\ndim(courses_combined)\n\n[1] 1695    2\n\n\nPart b\n\n# Calculate the median class size across all class sections.\ncourses_combined |&gt;\n  summarise(median(enroll))\n\n# A tibble: 1 × 1\n  `median(enroll)`\n             &lt;int&gt;\n1               18\n\n\nPart c\n\n# Calculate the median class size for each individual student. Once you have the correct output, store it as student_class_size,\nstudent_class_size &lt;- grades |&gt;\n  left_join(courses_combined) |&gt;\n  group_by(sid) |&gt;\n  summarise(median_size = median(enroll))\n\nJoining with `by = join_by(sessionID)`\n\n\n\n# Construct a histogram of the median class sizes experienced by the students.\nggplot(student_class_size, aes(x = median_size)) +\n  geom_histogram(color = \"white\", binwidth = 3) +\n  theme_light()",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Joining</span>"
    ]
  },
  {
    "objectID": "ica/ica-joining.html#exercise-5-narrowing-in-on-classes",
    "href": "ica/ica-joining.html#exercise-5-narrowing-in-on-classes",
    "title": "Joining",
    "section": "Exercise 5: Narrowing in on classes",
    "text": "Exercise 5: Narrowing in on classes\nPart a\n\n# Show data on the students that enrolled in session1986\ngrades |&gt;\n  filter(sessionID == \"session1986\")\n\n     sid grade   sessionID\n1 S31401    B+ session1986\n2 S32247     B session1986\n\n\nPart b\n\n# Below is a dataset with all courses in department E:\ndept_E &lt;- courses |&gt; \n  filter(dept == \"E\")\n\nhead(dept_E)\n\n    sessionID dept level    sem enroll     iid\n1 session2326    E   100 SP2002     20 inst169\n2 session2835    E   100 SP2003     26 inst170\n3 session3104    E   100 SP2004     31 inst170\n4 session3658    E   100 FA2004     18 inst171\n5 session3798    E   100 FA2004     13 inst171\n6 session3799    E   100 FA2004     11 inst173\n\n\n\n# What students enrolled in classes in department E?\ngrades |&gt;\n  semi_join(dept_E)\n\nJoining with `by = join_by(sessionID)`\n\n\n      sid grade   sessionID\n1  S31245     A session2326\n2  S31470     B session3658\n3  S31470     B session3798\n4  S31470     A session3799\n5  S31938     A session2326\n6  S31968     A session3104\n7  S32022     A session3798\n8  S32046    A- session2326\n9  S32226     A session2326\n10 S32415     B session2835\n11 S32415    B+ session3799\n12 S32484    A- session3658",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Joining</span>"
    ]
  },
  {
    "objectID": "ica/ica-joining.html#exercise-6-all-the-wrangling",
    "href": "ica/ica-joining.html#exercise-6-all-the-wrangling",
    "title": "Joining",
    "section": "Exercise 6: All the wrangling",
    "text": "Exercise 6: All the wrangling\n\n# You’ll need an extra table to convert grades to grade point averages\ngpa_conversion &lt;- tibble(\n  grade = c(\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"NC\", \"AU\", \"S\"), \n  gp = c(4.3, 4, 3.7, 3.3, 3, 2.7, 2.3, 2, 1.7, 1.3, 1, 0.7, 0, NA, NA)\n)\n\ngpa_conversion\n\n# A tibble: 15 × 2\n   grade    gp\n   &lt;chr&gt; &lt;dbl&gt;\n 1 A+      4.3\n 2 A       4  \n 3 A-      3.7\n 4 B+      3.3\n 5 B       3  \n 6 B-      2.7\n 7 C+      2.3\n 8 C       2  \n 9 C-      1.7\n10 D+      1.3\n11 D       1  \n12 D-      0.7\n13 NC      0  \n14 AU     NA  \n15 S      NA  \n\n\nPart a\n\n# How many total student enrollments are there in each department? Order from high to low.\ncourses |&gt;\n  group_by(dept) |&gt;\n  summarise(sum_enroll = sum(enroll)) |&gt;\n  arrange(desc(sum_enroll))\n\n# A tibble: 40 × 2\n   dept  sum_enroll\n   &lt;chr&gt;      &lt;int&gt;\n 1 d           3046\n 2 j           2312\n 3 O           2178\n 4 M           2129\n 5 m           2105\n 6 D           2003\n 7 W           1960\n 8 q           1859\n 9 k           1824\n10 F           1587\n# ℹ 30 more rows\n\n\nPart b\n\n# What’s the grade-point average (GPA) for each student?\ngrades |&gt;\n  left_join(gpa_conversion) |&gt;\n  na.omit() |&gt;\n  group_by(sid) |&gt;\n  summarise(mean(gp))\n\nJoining with `by = join_by(grade)`\n\n\n# A tibble: 443 × 2\n   sid    `mean(gp)`\n   &lt;chr&gt;       &lt;dbl&gt;\n 1 S31185       2.41\n 2 S31188       3.02\n 3 S31191       3.21\n 4 S31194       3.36\n 5 S31197       3.35\n 6 S31200       2.2 \n 7 S31203       3.82\n 8 S31206       2.46\n 9 S31209       3.13\n10 S31212       3.67\n# ℹ 433 more rows\n\n\nPart c\n\n# What’s the median GPA across all students?\ngrades |&gt;\n  left_join(gpa_conversion) |&gt;\n  na.omit() |&gt;\n  summarise(median(gp))\n\nJoining with `by = join_by(grade)`\n\n\n  median(gp)\n1        3.7\n\n\nPart d\n\n# What fraction of grades are below B+?\ngrades |&gt;\n  left_join(gpa_conversion) |&gt;\n  na.omit() |&gt;\n  summarise(grades_below_Bplus = sum(gp &lt; 3.3)/sum(gp &gt;= 0))\n\nJoining with `by = join_by(grade)`\n\n\n  grades_below_Bplus\n1          0.2834776\n\n\nPart e\n\n# What’s the grade-point average for each instructor? Order from low to high.\ncourses |&gt;\n  left_join(grades) |&gt;\n  left_join(gpa_conversion) |&gt;\n  na.omit() |&gt;\n  group_by(iid) |&gt;\n  summarise(prof_gpa = mean(gp)) |&gt;\n  arrange(prof_gpa)\n\nJoining with `by = join_by(sessionID)`\n\n\nWarning in left_join(courses, grades): Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 57 of `x` matches multiple rows in `y`.\nℹ Row 1931 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\n\nJoining with `by = join_by(grade)`\n\n\n# A tibble: 359 × 2\n   iid     prof_gpa\n   &lt;chr&gt;      &lt;dbl&gt;\n 1 inst265     1.3 \n 2 inst444     1.7 \n 3 inst513     1.85\n 4 inst200     2   \n 5 inst507     2.2 \n 6 inst445     2.3 \n 7 inst420     2.6 \n 8 inst262     2.65\n 9 inst176     2.66\n10 inst234     2.7 \n# ℹ 349 more rows\n\n\n\n# Estimate the grade-point average for each department, and sort from low to high. NOTE: Don’t include cross-listed courses.\ncross_listed &lt;- courses |&gt;\n  count(sessionID) |&gt;\n  filter(n &gt; 1)\n\ncourses |&gt;\n  left_join(grades) |&gt;\n  left_join(gpa_conversion) |&gt;\n  anti_join(cross_listed) |&gt; \n  na.omit(gp) |&gt;\n  arrange(dept) |&gt;\n  group_by(dept) |&gt;\n  summarise(mean(gp))\n\nJoining with `by = join_by(sessionID)`\n\n\nWarning in left_join(courses, grades): Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 57 of `x` matches multiple rows in `y`.\nℹ Row 1931 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\n\nJoining with `by = join_by(grade)`\nJoining with `by = join_by(sessionID)`\n\n\n# A tibble: 38 × 2\n   dept  `mean(gp)`\n   &lt;chr&gt;      &lt;dbl&gt;\n 1 A           3.5 \n 2 B           3.2 \n 3 C           3.53\n 4 D           3.59\n 5 E           3.64\n 6 F           3.30\n 7 G           3.18\n 8 H           3.48\n 9 I           3.51\n10 J           3.22\n# ℹ 28 more rows",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Joining</span>"
    ]
  },
  {
    "objectID": "ica/ica-factors.html",
    "href": "ica/ica-factors.html",
    "title": "Factors",
    "section": "",
    "text": "Exercise 1: Changing Order\n# Check out a column plot of the number of times each grade was assigned during the study period\ngrade_distribution |&gt; \n  ggplot(aes(x = grade, y = n)) +\n    geom_col()\n# Construct a new column plot, manually reordering the grades from high (A) to low (NC) with “S” and “AU” at the end:\ngrade_distribution |&gt;\n  mutate(grade = fct_relevel(grade, c(\"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"NC\", \"S\", \"AU\"))) |&gt;\n  ggplot(aes(x = grade, y = n)) +\n    geom_col()\n# Construct a new column plot, reordering the grades in ascending frequency (i.e. how often the grades were assigned):\ngrade_distribution |&gt;\n  mutate(grade = fct_reorder(grade, n)) |&gt;\n  ggplot(aes(x = grade, y = n)) +\n    geom_col()\n# Construct a new column plot, reordering the grades in descending frequency (i.e. how often the grades were assigned):\ngrade_distribution |&gt;\n  mutate(grade = fct_reorder(grade, n, .desc = TRUE)) |&gt;\n  ggplot(aes(x = grade, y = n)) +\n    geom_col()",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Factors</span>"
    ]
  },
  {
    "objectID": "ica/ica-factors.html#exercise-2-changing-factor-level-labels",
    "href": "ica/ica-factors.html#exercise-2-changing-factor-level-labels",
    "title": "Factors",
    "section": "Exercise 2: Changing Factor Level Labels",
    "text": "Exercise 2: Changing Factor Level Labels\n\n# It may not be clear what “AU” and “S” stand for. Construct a new column plot that renames these levels “Audit” and “Satisfactory”, while keeping the other grade labels the same and in a meaningful order:\ngrade_distribution |&gt;\n  mutate(grade = fct_relevel(grade, c(\"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"NC\", \"S\", \"AU\"))) |&gt;\n  mutate(grade = fct_recode(grade, \"Satisfactory\" = \"S\", \"Audit\" = \"AU\")) |&gt;  # Multiple pieces go into the last 2 blanks\n  ggplot(aes(x = grade, y = n)) +\n    geom_col()",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Factors</span>"
    ]
  },
  {
    "objectID": "ica/ica-strings.html",
    "href": "ica/ica-strings.html",
    "title": "Strings",
    "section": "",
    "text": "Exercise 1: Time slots\ncourses &lt;- read.csv(\"https://mac-stat.github.io/data/registrar.csv\")\n\n# Check it out\nhead(courses)\n\n       number   crn                                                name  days\n1 AMST 112-01 10318         Introduction to African American Literature M W F\n2 AMST 194-01 10073              Introduction to Asian American Studies M W F\n3 AMST 194-F1 10072 What’s After White Empire - And Is It Already Here?  T R \n4 AMST 203-01 10646 Politics and Inequality: The American Welfare State M W F\n5 AMST 205-01 10842                         Trans Theories and Politics  T R \n6 AMST 209-01 10474                   Civil Rights in the United States   W  \n             time      room             instructor avail_max\n1 9:40 - 10:40 am  MAIN 009       Daylanne English    3 / 20\n2  1:10 - 2:10 pm MUSIC 219          Jake Nagasawa   -4 / 16\n3  3:00 - 4:30 pm   HUM 214 Karin Aguilar-San Juan    0 / 14\n4 9:40 - 10:40 am  CARN 305          Lesley Lavery    3 / 25\n5  3:00 - 4:30 pm  MAIN 009              Myrl Beam   -2 / 20\n6 7:00 - 10:00 pm  MAIN 010         Walter Greason   -1 / 15\n# Use our more familiar wrangling tools to warm up\n# Construct a table that indicates the number of classes offered in each day/time slot\ncourses |&gt;\n  group_by(days) |&gt;\n  summarise(weekly_schedule = n()) |&gt;\n  arrange(desc(weekly_schedule))\n\n# A tibble: 12 × 2\n   days    weekly_schedule\n   &lt;chr&gt;             &lt;int&gt;\n 1 \"M W F\"             325\n 2 \" T R \"             215\n 3 \" T   \"              68\n 4 \"   R \"              64\n 5 \"M    \"              36\n 6 \"  W  \"              32\n 7 \"M W  \"              25\n 8 \"    F\"               5\n 9 \"\"                    1\n10 \"  W F\"               1\n11 \"M WR \"               1\n12 \"MTWR \"               1\n\ncourses |&gt;\n  group_by(time) |&gt;\n  summarise(daily_schedule = n()) |&gt;\n  arrange(desc(daily_schedule))\n\n# A tibble: 55 × 2\n   time             daily_schedule\n   &lt;chr&gt;                     &lt;int&gt;\n 1 9:40 - 11:10 am              78\n 2 10:50 - 11:50 am             77\n 3 9:40 - 10:40 am              74\n 4 1:10 - 2:10 pm               69\n 5 3:00 - 4:30 pm               65\n 6 1:20 - 2:50 pm               63\n 7 2:20 - 3:20 pm               48\n 8 3:30 - 4:30 pm               39\n 9 12:00 - 1:00 pm              38\n10 7:00 - 10:00 pm              36\n# ℹ 45 more rows\n\n# Print only the 6 most popular time slots\ncourses |&gt;\n  group_by(time) |&gt;\n  summarise(daily_schedule = n()) |&gt;\n  arrange(desc(daily_schedule)) |&gt;\n  head(6)\n\n# A tibble: 6 × 2\n  time             daily_schedule\n  &lt;chr&gt;                     &lt;int&gt;\n1 9:40 - 11:10 am              78\n2 10:50 - 11:50 am             77\n3 9:40 - 10:40 am              74\n4 1:10 - 2:10 pm               69\n5 3:00 - 4:30 pm               65\n6 1:20 - 2:50 pm               63",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Strings</span>"
    ]
  },
  {
    "objectID": "ica/ica-strings.html#exercise-2-prep-the-data",
    "href": "ica/ica-strings.html#exercise-2-prep-the-data",
    "title": "Strings",
    "section": "Exercise 2: Prep the data",
    "text": "Exercise 2: Prep the data\n\n# Split avail_max into 2 separate variables: avail and max.\n# Use avail and max to define a new variable called enroll. HINT: You’ll need as.numeric()\n# Split the course number into 3 separate variables: dept, number, and section. HINT: You can use separate() to split a variable into 3, not just 2 new variables.\ncourses_clean &lt;- courses |&gt;\n  separate(avail_max, c(\"avail\", \"max\"), sep = \" / \") |&gt;\n  mutate(avail = as.numeric(avail), max = as.numeric(max)) |&gt;\n  mutate(enroll = max-avail) |&gt;\n  separate(number, c(\"dept\", \"big_number\"), sep = \" \") |&gt;\n  separate(big_number, c(\"number\", \"section\"), sep = \"-\")",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Strings</span>"
    ]
  },
  {
    "objectID": "ica/ica-strings.html#exercise-3-courses-by-department",
    "href": "ica/ica-strings.html#exercise-3-courses-by-department",
    "title": "Strings",
    "section": "Exercise 3: Courses by department",
    "text": "Exercise 3: Courses by department\n\n# Using courses_clean, identify the 6 departments that offered the most sections\ncourses_clean |&gt;\n  group_by(dept) |&gt;\n  summarise(nmbr_sections = n()) |&gt;\n  arrange(desc(nmbr_sections)) |&gt;\n  head(6)\n\n# A tibble: 6 × 2\n  dept  nmbr_sections\n  &lt;chr&gt;         &lt;int&gt;\n1 SPAN             45\n2 BIOL             44\n3 ENVI             38\n4 PSYC             37\n5 CHEM             33\n6 COMP             31\n\n# Identify the 6 departments with the longest average course titles\ncourses_clean |&gt;\n  group_by(dept) |&gt;\n  summarise(title_length = mean(str_length(name))) |&gt;\n  arrange(desc(title_length)) |&gt;\n  head(6)\n\n# A tibble: 6 × 2\n  dept  title_length\n  &lt;chr&gt;        &lt;dbl&gt;\n1 WGSS          46.3\n2 INTL          41.4\n3 EDUC          39.4\n4 MCST          39.4\n5 POLI          37.4\n6 AMST          37.3",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Strings</span>"
    ]
  },
  {
    "objectID": "ica/ica-strings.html#exercise-4-stat-courses",
    "href": "ica/ica-strings.html#exercise-4-stat-courses",
    "title": "Strings",
    "section": "Exercise 4: STAT courses",
    "text": "Exercise 4: STAT courses\nPart a\n\n# Get a subset of courses_clean that only includes courses taught by Alicia Johnson.\ncourses_clean |&gt;\n  filter(instructor == \"Alicia Johnson\")\n\n  dept number section   crn                         name  days            time\n1 STAT    253      01 10806 Statistical Machine Learning  T R  9:40 - 11:10 am\n2 STAT    253      02 10807 Statistical Machine Learning  T R   1:20 - 2:50 pm\n3 STAT    253      03 10808 Statistical Machine Learning  T R   3:00 - 4:30 pm\n        room     instructor avail max enroll\n1 THEATR 206 Alicia Johnson    -3  20     23\n2 THEATR 206 Alicia Johnson    -3  20     23\n3 THEATR 206 Alicia Johnson     2  20     18\n\n\nPart b\nCreate a new dataset from courses_clean, named stat, that only includes STAT sections. In this dataset:\nIn the course names:\n\nRemove “Introduction to” from any name.\nShorten “Statistical” to “Stat” where relevant.\n\nDefine a variable that records the start_time for the course.\nKeep only the number, name, start_time, enroll columns.\nThe result should have 19 rows and 4 columns.\n\nstat &lt;- courses_clean |&gt;\n  filter(dept == \"STAT\") |&gt;\n  mutate(name = str_replace(name, \"Statistical\", \"Stat\"))|&gt;\n  mutate(name = str_remove(name, \"Introduction to\")) |&gt;\n  separate(time, c(\"start_time\", \"end\"), sep = \" - \") |&gt;\n  select(number, name, start_time, enroll)\n\ndim(stat)\n\n[1] 19  4",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Strings</span>"
    ]
  },
  {
    "objectID": "ica/ica-strings.html#exercise-5-more-cleaning",
    "href": "ica/ica-strings.html#exercise-5-more-cleaning",
    "title": "Strings",
    "section": "Exercise 5: More cleaning",
    "text": "Exercise 5: More cleaning\nMake the following changes to the courses_clean data. Because they have different enrollment structures, and we don’t want to compare apples and oranges, remove the following:\n\nall sections in PE and INTD (interdisciplinary studies courses)\nall music ensembles and dance practicums, i.e. all MUSI and THDA classes with numbers less than 100. HINT: !(dept == \"MUSI\" & as.numeric(number) &lt; 100)\nall lab sections. Be careful which variable you use here. For example, you don’t want to search by “Lab” and accidentally eliminate courses with words such as “Labor”.\n\nSave the results as enrollments (don’t overwrite courses_clean).\n\nenrollments &lt;- courses_clean |&gt;\n  filter(dept != \"PE\", dept != \"INTD\") |&gt;\n  filter(\n    !(dept == \"MUSI\" & as.numeric(number) &lt; 100), \n    !(dept == \"THDA\" & as.numeric(number) &lt; 100)) |&gt;\n  filter(!(str_detect(section, \"L\")))\n\ndim(enrollments)\n\n[1] 583  12",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Strings</span>"
    ]
  },
  {
    "objectID": "ica/ica-strings.html#exercise-6-enrollment-departments",
    "href": "ica/ica-strings.html#exercise-6-enrollment-departments",
    "title": "Strings",
    "section": "Exercise 6: Enrollment & departments",
    "text": "Exercise 6: Enrollment & departments\nExplore enrollments by department. You decide what research questions to focus on. Use both visual and numerical summaries.\n\n# Top 10 departments by average class size\nenrollments |&gt;\n  group_by(dept) |&gt;\n  summarise(avg_class = mean(enroll)) |&gt;\n  arrange(desc(avg_class)) |&gt;\n  head(10)\n\n# A tibble: 10 × 2\n   dept  avg_class\n   &lt;chr&gt;     &lt;dbl&gt;\n 1 CHEM       24.6\n 2 MATH       21.3\n 3 STAT       20.9\n 4 PSYC       20.8\n 5 PHYS       20.5\n 6 ECON       19.4\n 7 BIOL       19.4\n 8 ENVI       18.9\n 9 COMP       18.2\n10 GEOL       17.9\n\nenrollments |&gt;\n  group_by(dept) |&gt;\n  summarise(avg_class = mean(enroll)) |&gt;\n  arrange(desc(avg_class)) |&gt;\n  head(10) |&gt;\n  mutate(dept = fct_reorder(dept, avg_class, .desc = TRUE)) |&gt;\n  ggplot(aes(x = dept, y = avg_class)) +\n    geom_col() +\n    theme_light()",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Strings</span>"
    ]
  },
  {
    "objectID": "ica/ica-strings.html#exercise-7-enrollment-faculty",
    "href": "ica/ica-strings.html#exercise-7-enrollment-faculty",
    "title": "Strings",
    "section": "Exercise 7: Enrollment & faculty",
    "text": "Exercise 7: Enrollment & faculty\n\n# Problem: cross-listed courses!\nenrollments |&gt;\n  filter(dept %in% c(\"STAT\", \"COMP\"), number == 112, section == \"01\")\n\n  dept number section   crn                         name  days           time\n1 COMP    112      01 10248 Introduction to Data Science  T R  3:00 - 4:30 pm\n2 STAT    112      01 10249 Introduction to Data Science  T R  3:00 - 4:30 pm\n      room        instructor avail max enroll\n1 OLRI 254 Brianna Heggeseth     1  28     27\n2 OLRI 254 Brianna Heggeseth     1  28     27\n\n\n\n# In order to not double count an instructor’s enrollments, we can keep only the courses that have distinct() combinations of days, time, instructor values\nenrollments_2 &lt;- enrollments |&gt;\n  distinct(days, time, instructor, .keep_all = TRUE)\n\n# NOTE: By default this keeps the first department alphabetically\n# That's fine because we won't use this to analyze department enrollments!\nenrollments_2 |&gt;\n  filter(instructor == \"Brianna Heggeseth\", name == \"Introduction to Data Science\")\n\n  dept number section   crn                         name  days           time\n1 COMP    112      01 10248 Introduction to Data Science  T R  3:00 - 4:30 pm\n      room        instructor avail max enroll\n1 OLRI 254 Brianna Heggeseth     1  28     27\n\n\nNow, explore enrollments by instructor. You decide what research questions to focus on. Use both visual and numerical summaries.\n\n# Number of students per instructor (top 10)\nenrollments_2 |&gt;\n  group_by(instructor) |&gt;\n  summarise(total_students = sum(enroll)) |&gt;\n  arrange(desc(total_students)) |&gt;\n  head(10)\n\n# A tibble: 10 × 2\n   instructor         total_students\n   &lt;chr&gt;                       &lt;dbl&gt;\n 1 Andrew Beveridge               88\n 2 Kristin Heysse                 78\n 3 Cari Gillen-O'Neel             75\n 4 Lori Ziegelmeier               73\n 5 Lian Duan                      71\n 6 Mario Solis-Garcia             66\n 7 Alicia Johnson                 64\n 8 Kelsey Boyle                   64\n 9 Susan Green                    64\n10 Thomas Varberg                 62\n\n# Number of studets per instructor by department (top 8)\nenrollments_2 |&gt;\n  group_by(instructor) |&gt;\n  summarise(total_students = sum(enroll)) |&gt;\n  arrange(desc(total_students)) |&gt;\n  left_join(enrollments_2, join_by(instructor == instructor)) |&gt;\n  select(instructor, total_students, dept) |&gt;\n  distinct(instructor, total_students, .keep_all = TRUE) |&gt;\n  head(8) |&gt;\n  separate(instructor, c(\"first\", \"last\"), \" \") |&gt;\n  mutate(last = fct_reorder(last, total_students, .desc = TRUE)) |&gt;\n  ggplot(aes(x = last, y = total_students, fill = dept)) +\n    geom_col() + \n    labs(\n      title = \"Total Number of Students by Professor\", \n      x = \"Professor\", \n      y = \"# of Students\", \n      fill = \"Department\") +\n    theme_light()",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Strings</span>"
    ]
  },
  {
    "objectID": "ica/ica-data-import.html",
    "href": "ica/ica-data-import.html",
    "title": "\n17  Data Import\n",
    "section": "",
    "text": "17.1 Exercise 1: Save Data Locally\nRecord sources: From TMDb (The Movie Database), via Kaggle data repository https://www.kaggle.com/datasets/tmdb/tmdb-movie-metadata",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Data Import</span>"
    ]
  },
  {
    "objectID": "ica/ica-data-import.html#exercise-2-import-data-to-rstudio",
    "href": "ica/ica-data-import.html#exercise-2-import-data-to-rstudio",
    "title": "\n17  Data Import\n",
    "section": "\n17.2 Exercise 2: Import Data to RStudio",
    "text": "17.2 Exercise 2: Import Data to RStudio\n\n17.2.1 Part a: Absolute file path\n\n# Using absolute file path\nimdb_messy &lt;- read.csv(\"~/Documents/GitHub/portfolio-qcowell78/data/imdb_5000_messy.csv\")\n\n\n17.2.2 Part b: Relative file path\n\n# Get current working directory for .qmd file\ngetwd()\n\n[1] \"/Users/quinn/Documents/GitHub/portfolio-qcowell78/ica\"\n\n\n\n# Open data using relative file path\nimdb_temp &lt;- read.csv(\"../data/imdb_5000_messy.csv\")",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Data Import</span>"
    ]
  },
  {
    "objectID": "ica/ica-data-import.html#exercise-3-check-data",
    "href": "ica/ica-data-import.html#exercise-3-check-data",
    "title": "\n17  Data Import\n",
    "section": "\n17.3 Exercise 3: Check Data",
    "text": "17.3 Exercise 3: Check Data\n\n17.3.1 Part a\nOpen imdb_messy in the spreadsheet-like viewer by typing View(imdb_messy)\n\n17.3.2 Part b\n\n# Quick summary of each variable in dataset\nimdb_messy |&gt;\n  mutate(across(where(is.character), as.factor)) |&gt;  # convert characters to factors in order to summarize\n  summary()\n\n       X                    color               director_name \n Min.   :   1                  :  19                   : 104  \n 1st Qu.:1262   B&W            :  10   Steven Spielberg:  26  \n Median :2522   Black and White: 199   Woody Allen     :  22  \n Mean   :2522   color          :  30   Clint Eastwood  :  20  \n 3rd Qu.:3782   Color          :4755   Martin Scorsese :  20  \n Max.   :5043   COLOR          :  30   Ridley Scott    :  17  \n                                       (Other)         :4834  \n num_critic_for_reviews    duration     director_facebook_likes\n Min.   :  1.0          Min.   :  7.0   Min.   :    0.0        \n 1st Qu.: 50.0          1st Qu.: 93.0   1st Qu.:    7.0        \n Median :110.0          Median :103.0   Median :   49.0        \n Mean   :140.2          Mean   :107.2   Mean   :  686.5        \n 3rd Qu.:195.0          3rd Qu.:118.0   3rd Qu.:  194.5        \n Max.   :813.0          Max.   :511.0   Max.   :23000.0        \n NA's   :50             NA's   :15      NA's   :104            \n actor_3_facebook_likes          actor_2_name  actor_1_facebook_likes\n Min.   :    0.0        Morgan Freeman :  20   Min.   :     0        \n 1st Qu.:  133.0        Charlize Theron:  15   1st Qu.:   614        \n Median :  371.5        Brad Pitt      :  14   Median :   988        \n Mean   :  645.0                       :  13   Mean   :  6560        \n 3rd Qu.:  636.0        James Franco   :  11   3rd Qu.: 11000        \n Max.   :23000.0        Meryl Streep   :  11   Max.   :640000        \n NA's   :23             (Other)        :4959   NA's   :7             \n     gross                            genres                actor_1_name \n Min.   :      162   Drama               : 236   Robert De Niro   :  49  \n 1st Qu.:  5340988   Comedy              : 209   Johnny Depp      :  41  \n Median : 25517500   Comedy|Drama        : 191   Nicolas Cage     :  33  \n Mean   : 48468408   Comedy|Drama|Romance: 187   J.K. Simmons     :  31  \n 3rd Qu.: 62309438   Comedy|Romance      : 158   Bruce Willis     :  30  \n Max.   :760505847   Drama|Romance       : 152   Denzel Washington:  30  \n NA's   :884         (Other)             :3910   (Other)          :4829  \n                    movie_title   num_voted_users   cast_total_facebook_likes\n Ben-Hur                  :   3   Min.   :      5   Min.   :     0           \n Halloween                :   3   1st Qu.:   8594   1st Qu.:  1411           \n Home                     :   3   Median :  34359   Median :  3090           \n King Kong                :   3   Mean   :  83668   Mean   :  9699           \n Pan                      :   3   3rd Qu.:  96309   3rd Qu.: 13756           \n The Fast and the Furious :   3   Max.   :1689764   Max.   :656730           \n (Other)                  :5025                                              \n         actor_3_name  facenumber_in_poster\n               :  23   Min.   : 0.000      \n Ben Mendelsohn:   8   1st Qu.: 0.000      \n John Heard    :   8   Median : 1.000      \n Steve Coogan  :   8   Mean   : 1.371      \n Anne Hathaway :   7   3rd Qu.: 2.000      \n Jon Gries     :   7   Max.   :43.000      \n (Other)       :4982   NA's   :13          \n                                                                           plot_keywords \n                                                                                  : 153  \n based on novel                                                                   :   4  \n 1940s|child hero|fantasy world|orphan|reference to peter pan                     :   3  \n alien friendship|alien invasion|australia|flying car|mother daughter relationship:   3  \n animal name in title|ape abducts a woman|gorilla|island|king kong                :   3  \n assistant|experiment|frankenstein|medical student|scientist                      :   3  \n (Other)                                                                          :4874  \n                                             movie_imdb_link\n http://www.imdb.com/title/tt0077651/?ref_=fn_tt_tt_1:   3  \n http://www.imdb.com/title/tt0232500/?ref_=fn_tt_tt_1:   3  \n http://www.imdb.com/title/tt0360717/?ref_=fn_tt_tt_1:   3  \n http://www.imdb.com/title/tt1976009/?ref_=fn_tt_tt_1:   3  \n http://www.imdb.com/title/tt2224026/?ref_=fn_tt_tt_1:   3  \n http://www.imdb.com/title/tt2638144/?ref_=fn_tt_tt_1:   3  \n (Other)                                             :5025  \n num_user_for_reviews     language         country       content_rating\n Min.   :   1.0       English :4704   USA      :3807   R        :2118  \n 1st Qu.:  65.0       French  :  73   UK       : 448   PG-13    :1461  \n Median : 156.0       Spanish :  40   France   : 154   PG       : 701  \n Mean   : 272.8       Hindi   :  28   Canada   : 126            : 303  \n 3rd Qu.: 326.0       Mandarin:  26   Germany  :  97   Not Rated: 116  \n Max.   :5060.0       German  :  19   Australia:  55   G        : 112  \n NA's   :21           (Other) : 153   (Other)  : 356   (Other)  : 232  \n     budget            title_year   actor_2_facebook_likes   imdb_score   \n Min.   :2.180e+02   Min.   :1916   Min.   :     0         Min.   :1.600  \n 1st Qu.:6.000e+06   1st Qu.:1999   1st Qu.:   281         1st Qu.:5.800  \n Median :2.000e+07   Median :2005   Median :   595         Median :6.600  \n Mean   :3.975e+07   Mean   :2002   Mean   :  1652         Mean   :6.442  \n 3rd Qu.:4.500e+07   3rd Qu.:2011   3rd Qu.:   918         3rd Qu.:7.200  \n Max.   :1.222e+10   Max.   :2016   Max.   :137000         Max.   :9.500  \n NA's   :492         NA's   :108    NA's   :13                            \n  aspect_ratio   movie_facebook_likes\n Min.   : 1.18   Min.   :     0      \n 1st Qu.: 1.85   1st Qu.:     0      \n Median : 2.35   Median :   166      \n Mean   : 2.22   Mean   :  7526      \n 3rd Qu.: 2.35   3rd Qu.:  3000      \n Max.   :16.00   Max.   :349000      \n NA's   :329",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Data Import</span>"
    ]
  },
  {
    "objectID": "ica/ica-data-import.html#exercise-4-clean-data-factor-variables",
    "href": "ica/ica-data-import.html#exercise-4-clean-data-factor-variables",
    "title": "\n17  Data Import\n",
    "section": "\n17.4 Exercise 4: Clean Data: Factor Variables",
    "text": "17.4 Exercise 4: Clean Data: Factor Variables",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Data Import</span>"
    ]
  }
]